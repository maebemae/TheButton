
The Buttoner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b2c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08002bec  08002bec  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f00  08002f00  00004178  2**0
                  CONTENTS
  4 .ARM          00000000  08002f00  08002f00  00004178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f00  08002f00  00004178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00003f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f04  08002f04  00003f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  08002f08  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000178  08003080  00004178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08003080  00004244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f7c  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001798  00000000  00000000  0000b11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  0000c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000438  00000000  00000000  0000ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002412  00000000  00000000  0000d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075c1  00000000  00000000  0000f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086078  00000000  00000000  00016c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cceb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001334  00000000  00000000  0009cd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009e064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000178 	.word	0x20000178
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bd4 	.word	0x08002bd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000017c 	.word	0x2000017c
 8000104:	08002bd4 	.word	0x08002bd4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	e7fd      	b.n	8000234 <NMI_Handler+0x4>

08000238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800023c:	46c0      	nop			@ (mov r8, r8)
 800023e:	e7fd      	b.n	800023c <HardFault_Handler+0x4>

08000240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000258:	f000 f85a 	bl	8000310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000266:	2000      	movs	r0, #0
 8000268:	f000 f83a 	bl	80002e0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800026c:	46c0      	nop			@ (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000278:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <SystemInit+0x14>)
 800027a:	2280      	movs	r2, #128	@ 0x80
 800027c:	0512      	lsls	r2, r2, #20
 800027e:	609a      	str	r2, [r3, #8]
#endif
}
 8000280:	46c0      	nop			@ (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f7ff fff0 	bl	8000274 <SystemInit>
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000294:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000296:	e003      	b.n	80002a0 <LoopCopyDataInit>

08000298 <CopyDataInit>:
CopyDataInit:
  ldr r3, =_sidata
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800029a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800029c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800029e:	3104      	adds	r1, #4

080002a0 <LoopCopyDataInit>:
LoopCopyDataInit:
  ldr r0, =_sdata
 80002a0:	480a      	ldr	r0, [pc, #40]	@ (80002cc <LoopForever+0xa>)
  ldr r3, =_edata
 80002a2:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <LoopForever+0xe>)
  adds r2, r0, r1
 80002a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80002a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80002a8:	d3f6      	bcc.n	8000298 <CopyDataInit>
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <LoopForever+0x12>)
  b LoopFillZerobss
 80002ac:	e002      	b.n	80002b4 <LoopFillZerobss>

080002ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  str  r3, [r2]
 80002b0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b2:	3204      	adds	r2, #4

080002b4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <LoopForever+0x16>)
  cmp r2, r3
 80002b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80002b8:	d3f9      	bcc.n	80002ae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002ba:	f002 fc5d 	bl	8002b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f000 f933 	bl	8000528 <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 80002c8:	08002f08 	.word	0x08002f08
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002d0:	20000178 	.word	0x20000178
  ldr r2, =_sbss
 80002d4:	20000178 	.word	0x20000178
  ldr r3, = _ebss
 80002d8:	20000244 	.word	0x20000244

080002dc <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <DMA1_Channel1_IRQHandler>
	...

080002e0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	781a      	ldrb	r2, [r3, #0]
 80002f0:	0013      	movs	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	189b      	adds	r3, r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <BSP_PB_IRQHandler+0x2c>)
 80002fa:	189b      	adds	r3, r3, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 f819 	bl	8000334 <HAL_EXTI_IRQHandler>
}
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b002      	add	sp, #8
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	20000194 	.word	0x20000194

08000310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000314:	4b05      	ldr	r3, [pc, #20]	@ (800032c <HAL_IncTick+0x1c>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	001a      	movs	r2, r3
 800031a:	4b05      	ldr	r3, [pc, #20]	@ (8000330 <HAL_IncTick+0x20>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	18d2      	adds	r2, r2, r3
 8000320:	4b03      	ldr	r3, [pc, #12]	@ (8000330 <HAL_IncTick+0x20>)
 8000322:	601a      	str	r2, [r3, #0]
}
 8000324:	46c0      	nop			@ (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			@ (mov r8, r8)
 800032c:	20000000 	.word	0x20000000
 8000330:	200001a0 	.word	0x200001a0

08000334 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	0c1b      	lsrs	r3, r3, #16
 8000342:	2201      	movs	r2, #1
 8000344:	4013      	ands	r3, r2
 8000346:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	221f      	movs	r2, #31
 800034e:	4013      	ands	r3, r2
 8000350:	2201      	movs	r2, #1
 8000352:	409a      	lsls	r2, r3
 8000354:	0013      	movs	r3, r2
 8000356:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	015b      	lsls	r3, r3, #5
 800035c:	4a18      	ldr	r2, [pc, #96]	@ (80003c0 <HAL_EXTI_IRQHandler+0x8c>)
 800035e:	4694      	mov	ip, r2
 8000360:	4463      	add	r3, ip
 8000362:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	4013      	ands	r3, r2
 800036c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d009      	beq.n	8000388 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	693a      	ldr	r2, [r7, #16]
 8000378:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	015b      	lsls	r3, r3, #5
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <HAL_EXTI_IRQHandler+0x90>)
 800038e:	4694      	mov	ip, r2
 8000390:	4463      	add	r3, ip
 8000392:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	4013      	ands	r3, r2
 800039c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d009      	beq.n	80003b8 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	693a      	ldr	r2, [r7, #16]
 80003a8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d002      	beq.n	80003b8 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	4798      	blx	r3
    }
  }
}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b006      	add	sp, #24
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	4002180c 	.word	0x4002180c
 80003c4:	40021810 	.word	0x40021810

080003c8 <ClockSetup>:
 * in a header file.
 */

// minimal clock setup required for USB device operation
static inline void ClockSetup(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	// set HCLK to 48 MHz HSI48 synchronized to SOF*****************************
	// PWR Range 1 is the default - ok for 64 MHz
	RCC->CR |= RCC_CR_HSIUSB48ON;
 80003cc:	4b13      	ldr	r3, [pc, #76]	@ (800041c <ClockSetup+0x54>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <ClockSetup+0x54>)
 80003d2:	2180      	movs	r1, #128	@ 0x80
 80003d4:	03c9      	lsls	r1, r1, #15
 80003d6:	430a      	orrs	r2, r1
 80003d8:	601a      	str	r2, [r3, #0]
	FLASH->ACR |= FLASH_ACR_PRFTEN | 1u << FLASH_ACR_LATENCY_Pos; // 1 WS up to 48 MHz
 80003da:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <ClockSetup+0x58>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <ClockSetup+0x58>)
 80003e0:	2102      	movs	r1, #2
 80003e2:	31ff      	adds	r1, #255	@ 0xff
 80003e4:	430a      	orrs	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
    RCC->APBENR1 |= RCC_APBENR1_CRSEN;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <ClockSetup+0x54>)
 80003ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003ec:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <ClockSetup+0x54>)
 80003ee:	2180      	movs	r1, #128	@ 0x80
 80003f0:	0249      	lsls	r1, r1, #9
 80003f2:	430a      	orrs	r2, r1
 80003f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    CRS->CR |= CRS_CR_AUTOTRIMEN | CRS_CR_CEN;	// sync HSI48 to USB SOF
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <ClockSetup+0x5c>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <ClockSetup+0x5c>)
 80003fc:	2160      	movs	r1, #96	@ 0x60
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]

	while (~RCC->CR & RCC_CR_HSIUSB48RDY);
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	4b05      	ldr	r3, [pc, #20]	@ (800041c <ClockSetup+0x54>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	2380      	movs	r3, #128	@ 0x80
 800040a:	041b      	lsls	r3, r3, #16
 800040c:	4013      	ands	r3, r2
 800040e:	d0f9      	beq.n	8000404 <ClockSetup+0x3c>
	RCC->CFGR = RCC_CFGR_SW_HSIUSB;
 8000410:	4b02      	ldr	r3, [pc, #8]	@ (800041c <ClockSetup+0x54>)
 8000412:	2202      	movs	r2, #2
 8000414:	609a      	str	r2, [r3, #8]
}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	40022000 	.word	0x40022000
 8000424:	40006c00 	.word	0x40006c00

08000428 <USBhwSetup>:

// USB peripheral enable & pin configuration
static inline void USBhwSetup(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    RCC->APBENR1 |= RCC_APBENR1_USBEN;
 800042c:	4b04      	ldr	r3, [pc, #16]	@ (8000440 <USBhwSetup+0x18>)
 800042e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000430:	4b03      	ldr	r3, [pc, #12]	@ (8000440 <USBhwSetup+0x18>)
 8000432:	2180      	movs	r1, #128	@ 0x80
 8000434:	0189      	lsls	r1, r1, #6
 8000436:	430a      	orrs	r2, r1
 8000438:	63da      	str	r2, [r3, #60]	@ 0x3c
	// With C0 series, MODER and OSPEEEDR value is "don't care" for USB data pins
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <LED_Btn_Setup>:

// board LED/Button setup needed for HID demo
static inline void LED_Btn_Setup(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
#ifdef LED_PORT
	RCC->IOENR |= RCC_IOENR_GPIOEN(LED_PORT);
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <LED_Btn_Setup+0x50>)
 800044a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <LED_Btn_Setup+0x50>)
 800044e:	2101      	movs	r1, #1
 8000450:	430a      	orrs	r2, r1
 8000452:	635a      	str	r2, [r3, #52]	@ 0x34
	BF2F(LED_PORT->MODER, LED_BIT) = GPIO_MODER_OUT;
 8000454:	23a0      	movs	r3, #160	@ 0xa0
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	490f      	ldr	r1, [pc, #60]	@ (8000498 <LED_Btn_Setup+0x54>)
 800045c:	400a      	ands	r2, r1
 800045e:	2180      	movs	r1, #128	@ 0x80
 8000460:	00c9      	lsls	r1, r1, #3
 8000462:	430a      	orrs	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
#endif
#ifdef BTN_PORT
	RCC->IOENR |= RCC_IOENR_GPIOEN(BTN_PORT);
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <LED_Btn_Setup+0x50>)
 8000468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <LED_Btn_Setup+0x50>)
 800046c:	2104      	movs	r1, #4
 800046e:	430a      	orrs	r2, r1
 8000470:	635a      	str	r2, [r3, #52]	@ 0x34
	BF2F(BTN_PORT->PUPDR, BTN_BIT) = GPIO_PUPDR_PU;	// Nucleo board button active low
 8000472:	4a0a      	ldr	r2, [pc, #40]	@ (800049c <LED_Btn_Setup+0x58>)
 8000474:	6813      	ldr	r3, [r2, #0]
 8000476:	490a      	ldr	r1, [pc, #40]	@ (80004a0 <LED_Btn_Setup+0x5c>)
 8000478:	400b      	ands	r3, r1
 800047a:	2180      	movs	r1, #128	@ 0x80
 800047c:	04c9      	lsls	r1, r1, #19
 800047e:	430b      	orrs	r3, r1
 8000480:	6013      	str	r3, [r2, #0]
	BF2F(BTN_PORT->MODER, BTN_BIT) = GPIO_MODER_IN;
 8000482:	4a08      	ldr	r2, [pc, #32]	@ (80004a4 <LED_Btn_Setup+0x60>)
 8000484:	6813      	ldr	r3, [r2, #0]
 8000486:	4906      	ldr	r1, [pc, #24]	@ (80004a0 <LED_Btn_Setup+0x5c>)
 8000488:	400b      	ands	r3, r1
 800048a:	6013      	str	r3, [r2, #0]
#endif
}
 800048c:	46c0      	nop			@ (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000
 8000498:	fffff3ff 	.word	0xfffff3ff
 800049c:	5000080c 	.word	0x5000080c
 80004a0:	f3ffffff 	.word	0xf3ffffff
 80004a4:	50000800 	.word	0x50000800

080004a8 <hwLED_Set>:

static inline void hwLED_Set(bool on)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	701a      	strb	r2, [r3, #0]
#ifdef LED_PORT
	LED_PORT->BSRR = on ? LED_MSK : LED_MSK << 16;
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <hwLED_Set+0x18>
 80004bc:	2220      	movs	r2, #32
 80004be:	e001      	b.n	80004c4 <hwLED_Set+0x1c>
 80004c0:	2380      	movs	r3, #128	@ 0x80
 80004c2:	039a      	lsls	r2, r3, #14
 80004c4:	23a0      	movs	r3, #160	@ 0xa0
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	619a      	str	r2, [r3, #24]
#endif
}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <LED_Set>:

#include "mcu_hw.h"		// in Example/Inc/<mcu_series> directory
#include "usb_app.h"	// in USBdevice/Inc

void LED_Set(bool on)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	0002      	movs	r2, r0
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	701a      	strb	r2, [r3, #0]
	hwLED_Set(on);
 80004de:	1dfb      	adds	r3, r7, #7
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff ffe0 	bl	80004a8 <hwLED_Set>
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <BtnGet>:

bool BtnGet(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
#ifdef BTN_PORT
	return BTN_DOWN;
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <BtnGet+0x1c>)
 80004f6:	691b      	ldr	r3, [r3, #16]
 80004f8:	43db      	mvns	r3, r3
 80004fa:	0b5b      	lsrs	r3, r3, #13
 80004fc:	2201      	movs	r2, #1
 80004fe:	4013      	ands	r3, r2
 8000500:	1e5a      	subs	r2, r3, #1
 8000502:	4193      	sbcs	r3, r2
 8000504:	b2db      	uxtb	r3, r3
#else
	return 0;
#endif
}
 8000506:	0018      	movs	r0, r3
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	50000800 	.word	0x50000800

08000510 <usbdev_main>:

// usbdev demo application
static void usbdev_main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	ClockSetup();	// Setup MCU and USB peripheral clock - may be replaced by CubeMX/HAL routine
 8000514:	f7ff ff58 	bl	80003c8 <ClockSetup>
	LED_Btn_Setup();
 8000518:	f7ff ff94 	bl	8000444 <LED_Btn_Setup>
	USBhwSetup();	// Turn on USB peripheral and setup its pins - may be replaced by CubeMX/HAL routine
 800051c:	f7ff ff84 	bl	8000428 <USBhwSetup>

	USBapp_Init();	// Initialize and start USB stack
 8000520:	f000 ff08 	bl	8001334 <USBapp_Init>
	for (;;)
	{
#ifdef POLLED
		USBapp_poll();
#else
		__WFI();
 8000524:	bf30      	wfi
 8000526:	e7fd      	b.n	8000524 <usbdev_main+0x14>

08000528 <main>:
  *
  *	Defined as weak so that the full gbmUSBdev code with this demo
  *	may be included in the real application source code tree.
  */
__attribute__((weak)) int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	usbdev_main();
 800052c:	f7ff fff0 	bl	8000510 <usbdev_main>
 8000530:	2300      	movs	r3, #0
}
 8000532:	0018      	movs	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	0002      	movs	r2, r0
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b7f      	cmp	r3, #127	@ 0x7f
 800054a:	d809      	bhi.n	8000560 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	001a      	movs	r2, r3
 8000552:	231f      	movs	r3, #31
 8000554:	401a      	ands	r2, r3
 8000556:	4b04      	ldr	r3, [pc, #16]	@ (8000568 <__NVIC_EnableIRQ+0x30>)
 8000558:	2101      	movs	r1, #1
 800055a:	4091      	lsls	r1, r2
 800055c:	000a      	movs	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}
 8000568:	e000e100 	.word	0xe000e100

0800056c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	0002      	movs	r2, r0
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b7f      	cmp	r3, #127	@ 0x7f
 800057e:	d810      	bhi.n	80005a2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	001a      	movs	r2, r3
 8000586:	231f      	movs	r3, #31
 8000588:	4013      	ands	r3, r2
 800058a:	4908      	ldr	r1, [pc, #32]	@ (80005ac <__NVIC_DisableIRQ+0x40>)
 800058c:	2201      	movs	r2, #1
 800058e:	409a      	lsls	r2, r3
 8000590:	0013      	movs	r3, r2
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800059c:	f3bf 8f6f 	isb	sy
}
 80005a0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	0002      	movs	r2, r0
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80005c2:	d80a      	bhi.n	80005da <__NVIC_SetPendingIRQ+0x2a>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	001a      	movs	r2, r3
 80005ca:	231f      	movs	r3, #31
 80005cc:	4013      	ands	r3, r2
 80005ce:	4905      	ldr	r1, [pc, #20]	@ (80005e4 <__NVIC_SetPendingIRQ+0x34>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	409a      	lsls	r2, r3
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	50ca      	str	r2, [r1, r3]
  }
}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	e000e100 	.word	0xe000e100

080005e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	0002      	movs	r2, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80005fc:	d828      	bhi.n	8000650 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005fe:	4a2f      	ldr	r2, [pc, #188]	@ (80006bc <__NVIC_SetPriority+0xd4>)
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b25b      	sxtb	r3, r3
 8000606:	089b      	lsrs	r3, r3, #2
 8000608:	33c0      	adds	r3, #192	@ 0xc0
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	589b      	ldr	r3, [r3, r2]
 800060e:	1dfa      	adds	r2, r7, #7
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	0011      	movs	r1, r2
 8000614:	2203      	movs	r2, #3
 8000616:	400a      	ands	r2, r1
 8000618:	00d2      	lsls	r2, r2, #3
 800061a:	21ff      	movs	r1, #255	@ 0xff
 800061c:	4091      	lsls	r1, r2
 800061e:	000a      	movs	r2, r1
 8000620:	43d2      	mvns	r2, r2
 8000622:	401a      	ands	r2, r3
 8000624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	019b      	lsls	r3, r3, #6
 800062a:	22ff      	movs	r2, #255	@ 0xff
 800062c:	401a      	ands	r2, r3
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	0018      	movs	r0, r3
 8000634:	2303      	movs	r3, #3
 8000636:	4003      	ands	r3, r0
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800063c:	481f      	ldr	r0, [pc, #124]	@ (80006bc <__NVIC_SetPriority+0xd4>)
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	430a      	orrs	r2, r1
 8000648:	33c0      	adds	r3, #192	@ 0xc0
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800064e:	e031      	b.n	80006b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000650:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <__NVIC_SetPriority+0xd8>)
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	0019      	movs	r1, r3
 8000658:	230f      	movs	r3, #15
 800065a:	400b      	ands	r3, r1
 800065c:	3b08      	subs	r3, #8
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	3306      	adds	r3, #6
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	18d3      	adds	r3, r2, r3
 8000666:	3304      	adds	r3, #4
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1dfa      	adds	r2, r7, #7
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	0011      	movs	r1, r2
 8000670:	2203      	movs	r2, #3
 8000672:	400a      	ands	r2, r1
 8000674:	00d2      	lsls	r2, r2, #3
 8000676:	21ff      	movs	r1, #255	@ 0xff
 8000678:	4091      	lsls	r1, r2
 800067a:	000a      	movs	r2, r1
 800067c:	43d2      	mvns	r2, r2
 800067e:	401a      	ands	r2, r3
 8000680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	019b      	lsls	r3, r3, #6
 8000686:	22ff      	movs	r2, #255	@ 0xff
 8000688:	401a      	ands	r2, r3
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	0018      	movs	r0, r3
 8000690:	2303      	movs	r3, #3
 8000692:	4003      	ands	r3, r0
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000698:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <__NVIC_SetPriority+0xd8>)
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	001c      	movs	r4, r3
 80006a0:	230f      	movs	r3, #15
 80006a2:	4023      	ands	r3, r4
 80006a4:	3b08      	subs	r3, #8
 80006a6:	089b      	lsrs	r3, r3, #2
 80006a8:	430a      	orrs	r2, r1
 80006aa:	3306      	adds	r3, #6
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	18c3      	adds	r3, r0, r3
 80006b0:	3304      	adds	r3, #4
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b003      	add	sp, #12
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <HIDupdateKB>:

static const uint8_t TEXT[] = "well bite me";


static bool HIDupdateKB(const struct usbdevice_ *usbd)
{
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
#else
//	bool change = (bool)hid_data.InReport[2] ^ BtnGet();
//	if (change)
//		hid_data.InReport[2] ^= HIDKB_KPADSTAR;

	bool button = BtnGet();
 80006cc:	250d      	movs	r5, #13
 80006ce:	197c      	adds	r4, r7, r5
 80006d0:	f7ff ff0e 	bl	80004f0 <BtnGet>
 80006d4:	0003      	movs	r3, r0
 80006d6:	7023      	strb	r3, [r4, #0]
	bool change = false;
 80006d8:	210f      	movs	r1, #15
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	if(button != lastButton)
 80006e0:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <HIDupdateKB+0xec>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	197a      	adds	r2, r7, r5
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d006      	beq.n	80006fa <HIDupdateKB+0x36>
	{
		button = lastButton;
 80006ec:	197b      	adds	r3, r7, r5
 80006ee:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <HIDupdateKB+0xec>)
 80006f0:	7812      	ldrb	r2, [r2, #0]
 80006f2:	701a      	strb	r2, [r3, #0]
		change = true;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
	}

	if(change && !printing)
 80006fa:	230f      	movs	r3, #15
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d009      	beq.n	8000718 <HIDupdateKB+0x54>
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <HIDupdateKB+0xf0>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	4053      	eors	r3, r2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <HIDupdateKB+0x54>
	{
		printing = true;
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <HIDupdateKB+0xf0>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
	}

	if(printed >= sizeof(TEXT))
 8000718:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <HIDupdateKB+0xf4>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b0c      	cmp	r3, #12
 800071e:	d90b      	bls.n	8000738 <HIDupdateKB+0x74>
	{
		printing = false;
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HIDupdateKB+0xf0>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
		printed = 0;
 8000726:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <HIDupdateKB+0xf4>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
		hid_data.InReport[2] = 0;
 800072c:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <HIDupdateKB+0xf8>)
 800072e:	2200      	movs	r2, #0
 8000730:	721a      	strb	r2, [r3, #8]
		keyOn = false;
 8000732:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <HIDupdateKB+0xfc>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]


	// todo map from here
	// https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf

	if(printing)
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <HIDupdateKB+0xf0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d031      	beq.n	80007a4 <HIDupdateKB+0xe0>
	{
		uint8_t character = TEXT[printed];
 8000740:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <HIDupdateKB+0xf4>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	0019      	movs	r1, r3
 8000746:	200c      	movs	r0, #12
 8000748:	183b      	adds	r3, r7, r0
 800074a:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <HIDupdateKB+0x100>)
 800074c:	5c52      	ldrb	r2, [r2, r1]
 800074e:	701a      	strb	r2, [r3, #0]
		uint8_t hidId;
		hid_data.InReport[0] = 0;
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <HIDupdateKB+0xf8>)
 8000752:	2200      	movs	r2, #0
 8000754:	719a      	strb	r2, [r3, #6]
		if(character == ' '){
 8000756:	183b      	adds	r3, r7, r0
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b20      	cmp	r3, #32
 800075c:	d104      	bne.n	8000768 <HIDupdateKB+0xa4>
			hidId = 44;
 800075e:	230e      	movs	r3, #14
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	222c      	movs	r2, #44	@ 0x2c
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e00f      	b.n	8000788 <HIDupdateKB+0xc4>
		} else {
			uint8_t offset = character - 'a';
 8000768:	210b      	movs	r1, #11
 800076a:	187b      	adds	r3, r7, r1
 800076c:	220c      	movs	r2, #12
 800076e:	18ba      	adds	r2, r7, r2
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	3a61      	subs	r2, #97	@ 0x61
 8000774:	701a      	strb	r2, [r3, #0]
			hidId = offset + HIDKB_KEY_A;
 8000776:	230e      	movs	r3, #14
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	187a      	adds	r2, r7, r1
 800077c:	7812      	ldrb	r2, [r2, #0]
 800077e:	3204      	adds	r2, #4
 8000780:	701a      	strb	r2, [r3, #0]
			hid_data.InReport[0] = 2;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <HIDupdateKB+0xf8>)
 8000784:	2202      	movs	r2, #2
 8000786:	719a      	strb	r2, [r3, #6]
		}
		hid_data.InReport[2] = hidId;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <HIDupdateKB+0xf8>)
 800078a:	220e      	movs	r2, #14
 800078c:	18ba      	adds	r2, r7, r2
 800078e:	7812      	ldrb	r2, [r2, #0]
 8000790:	721a      	strb	r2, [r3, #8]
		printed++;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HIDupdateKB+0xf4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <HIDupdateKB+0xf4>)
 800079c:	701a      	strb	r2, [r3, #0]
		keyOn = true;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <HIDupdateKB+0xfc>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
	}
	return printing;
 80007a4:	4b03      	ldr	r3, [pc, #12]	@ (80007b4 <HIDupdateKB+0xf0>)
 80007a6:	781b      	ldrb	r3, [r3, #0]

#endif
	return change;
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b004      	add	sp, #16
 80007ae:	bdb0      	pop	{r4, r5, r7, pc}
 80007b0:	200001ba 	.word	0x200001ba
 80007b4:	200001bb 	.word	0x200001bb
 80007b8:	200001bc 	.word	0x200001bc
 80007bc:	200001a4 	.word	0x200001a4
 80007c0:	200001bd 	.word	0x200001bd
 80007c4:	08002cb8 	.word	0x08002cb8

080007c8 <HIDsetLEDs>:
{
	// redefine to control board's LED
}

static void HIDsetLEDs(const struct usbdevice_ *usbd)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	// set onboard LED to ScrollLock status
	LED_Set(hid_data.OutReport[0] & HIDKB_MSK_SCROLLLOCK);
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <HIDsetLEDs+0x28>)
 80007d2:	7b9b      	ldrb	r3, [r3, #14]
 80007d4:	001a      	movs	r2, r3
 80007d6:	2304      	movs	r3, #4
 80007d8:	4013      	ands	r3, r2
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff fe76 	bl	80004d2 <LED_Set>
}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	200001a4 	.word	0x200001a4

080007f4 <vcom_write>:
#endif	// USBD_CDC_CHANNELS > 1
};

//
void vcom_write(uint8_t ch, const char *buf, uint16_t size)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6039      	str	r1, [r7, #0]
 80007fc:	0011      	movs	r1, r2
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	1c02      	adds	r2, r0, #0
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	1c0a      	adds	r2, r1, #0
 8000808:	801a      	strh	r2, [r3, #0]
	if (ch < USBD_CDC_CHANNELS)
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d900      	bls.n	8000814 <vcom_write+0x20>
 8000812:	e07e      	b.n	8000912 <vcom_write+0x11e>
	{
		struct cdc_data_ *cdp = &cdc_data[ch];
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	229c      	movs	r2, #156	@ 0x9c
 800081a:	435a      	muls	r2, r3
 800081c:	4b3f      	ldr	r3, [pc, #252]	@ (800091c <vcom_write+0x128>)
 800081e:	18d3      	adds	r3, r2, r3
 8000820:	617b      	str	r3, [r7, #20]
		struct cdc_session_ *cds = &cdp->session;
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3390      	adds	r3, #144	@ 0x90
 8000826:	613b      	str	r3, [r7, #16]

		while (cds->connected && size)
 8000828:	e06a      	b.n	8000900 <vcom_write+0x10c>
		{
			while (cds->connected && cds->TxLength == CDC_DATA_EP_SIZE) ;	// buffer full -> wait
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d004      	beq.n	8000840 <vcom_write+0x4c>
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	7a1b      	ldrb	r3, [r3, #8]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b40      	cmp	r3, #64	@ 0x40
 800083e:	d0f5      	beq.n	800082c <vcom_write+0x38>

			if (cds->connected)
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	1d3a      	adds	r2, r7, #4
 8000848:	1d39      	adds	r1, r7, #4
 800084a:	8809      	ldrh	r1, [r1, #0]
 800084c:	8011      	strh	r1, [r2, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d056      	beq.n	8000900 <vcom_write+0x10c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000852:	b672      	cpsid	i
}
 8000854:	46c0      	nop			@ (mov r8, r8)
			{
				__disable_irq();
				uint16_t bfree = CDC_DATA_EP_SIZE - cds->TxLength;
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	7a1b      	ldrb	r3, [r3, #8]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	0019      	movs	r1, r3
 800085e:	200e      	movs	r0, #14
 8000860:	183b      	adds	r3, r7, r0
 8000862:	2240      	movs	r2, #64	@ 0x40
 8000864:	1a52      	subs	r2, r2, r1
 8000866:	801a      	strh	r2, [r3, #0]
				uint16_t chunksize = size < bfree ? size : bfree;
 8000868:	230c      	movs	r3, #12
 800086a:	18fa      	adds	r2, r7, r3
 800086c:	183b      	adds	r3, r7, r0
 800086e:	1d39      	adds	r1, r7, #4
 8000870:	880c      	ldrh	r4, [r1, #0]
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b298      	uxth	r0, r3
 8000876:	b2a1      	uxth	r1, r4
 8000878:	4288      	cmp	r0, r1
 800087a:	d900      	bls.n	800087e <vcom_write+0x8a>
 800087c:	1c23      	adds	r3, r4, #0
 800087e:	8013      	strh	r3, [r2, #0]
				memcpy(&cdp->TxData[cds->TxLength], buf, chunksize);
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	7a1b      	ldrb	r3, [r3, #8]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	3350      	adds	r3, #80	@ 0x50
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	18d0      	adds	r0, r2, r3
 800088c:	240c      	movs	r4, #12
 800088e:	193b      	adds	r3, r7, r4
 8000890:	881a      	ldrh	r2, [r3, #0]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	0019      	movs	r1, r3
 8000896:	f002 f993 	bl	8002bc0 <memcpy>
				buf += chunksize;
 800089a:	0020      	movs	r0, r4
 800089c:	183b      	adds	r3, r7, r0
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	18d3      	adds	r3, r2, r3
 80008a4:	603b      	str	r3, [r7, #0]
				size -= chunksize;
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	1d39      	adds	r1, r7, #4
 80008aa:	183a      	adds	r2, r7, r0
 80008ac:	8809      	ldrh	r1, [r1, #0]
 80008ae:	8812      	ldrh	r2, [r2, #0]
 80008b0:	1a8a      	subs	r2, r1, r2
 80008b2:	801a      	strh	r2, [r3, #0]
				cds->TxLength += chunksize;
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	7a1b      	ldrb	r3, [r3, #8]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	183b      	adds	r3, r7, r0
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	18d3      	adds	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	721a      	strb	r2, [r3, #8]
				if (cds->TxLength == CDC_DATA_EP_SIZE)
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	7a1b      	ldrb	r3, [r3, #8]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b40      	cmp	r3, #64	@ 0x40
 80008d0:	d111      	bne.n	80008f6 <vcom_write+0x102>
				{
					cds->TxTout = 0;
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	2200      	movs	r2, #0
 80008d6:	725a      	strb	r2, [r3, #9]
					NVIC_SetPendingIRQ(vcomcfg[ch].tx_irqn);
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	4910      	ldr	r1, [pc, #64]	@ (8000920 <vcom_write+0x12c>)
 80008de:	0013      	movs	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	189b      	adds	r3, r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	18cb      	adds	r3, r1, r3
 80008e8:	3301      	adds	r3, #1
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fe5e 	bl	80005b0 <__NVIC_SetPendingIRQ>
 80008f4:	e002      	b.n	80008fc <vcom_write+0x108>
				}
				else
					cds->TxTout = TX_TOUT;
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	2202      	movs	r2, #2
 80008fa:	725a      	strb	r2, [r3, #9]
  __ASM volatile ("cpsie i" : : : "memory");
 80008fc:	b662      	cpsie	i
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
		while (cds->connected && size)
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <vcom_write+0x11e>
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d18b      	bne.n	800082a <vcom_write+0x36>
				__enable_irq();
			}
		}
	}
}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b007      	add	sp, #28
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	20000004 	.word	0x20000004
 8000920:	08002cc8 	.word	0x08002cc8

08000924 <vcom_putchar>:

// put character into sendbuf, generate send packet request event
void vcom_putchar(uint8_t ch, char c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	0002      	movs	r2, r0
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	1c0a      	adds	r2, r1, #0
 8000934:	701a      	strb	r2, [r3, #0]
	vcom_write(ch, &c, 1);
 8000936:	1db9      	adds	r1, r7, #6
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2201      	movs	r2, #1
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff ff58 	bl	80007f4 <vcom_write>
}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b002      	add	sp, #8
 800094a:	bd80      	pop	{r7, pc}

0800094c <vcom_putstring>:

void vcom_putstring(uint8_t ch, const char *s)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	0002      	movs	r2, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	701a      	strb	r2, [r3, #0]
	if (s)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00b      	beq.n	8000978 <vcom_putstring+0x2c>
		vcom_write(ch, s, strlen(s));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff fbd0 	bl	8000108 <strlen>
 8000968:	0003      	movs	r3, r0
 800096a:	b29a      	uxth	r2, r3
 800096c:	6839      	ldr	r1, [r7, #0]
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff3e 	bl	80007f4 <vcom_write>
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}

08000980 <send_serialstate_notif>:
// forward declaration
const struct usbdevice_ usbdev;

// inline only to avoid not used warning
static inline void send_serialstate_notif(uint8_t ch)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af02      	add	r7, sp, #8
 8000986:	0002      	movs	r2, r0
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	701a      	strb	r2, [r3, #0]
	ssnotif.wIndex = ConfigDesc.cdc[ch].cdcdesc.cdccomifdesc.bInterfaceNumber;	// interface
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	492b      	ldr	r1, [pc, #172]	@ (8000a40 <send_serialstate_notif+0xc0>)
 8000992:	0013      	movs	r3, r2
 8000994:	015b      	lsls	r3, r3, #5
 8000996:	189b      	adds	r3, r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	18cb      	adds	r3, r1, r3
 800099c:	3313      	adds	r3, #19
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	001a      	movs	r2, r3
 80009a2:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <send_serialstate_notif+0xc4>)
 80009a4:	809a      	strh	r2, [r3, #4]
	ssnotif.wSerialState = cdc_data[ch].SerialState;
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4a27      	ldr	r2, [pc, #156]	@ (8000a48 <send_serialstate_notif+0xc8>)
 80009ac:	219c      	movs	r1, #156	@ 0x9c
 80009ae:	434b      	muls	r3, r1
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	330a      	adds	r3, #10
 80009b4:	881a      	ldrh	r2, [r3, #0]
 80009b6:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <send_serialstate_notif+0xc4>)
 80009b8:	811a      	strh	r2, [r3, #8]
	if (USBdev_SendData(&usbdev, ConfigDesc.cdc[ch].cdcdesc.cdcnotif.bEndpointAddress,
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4920      	ldr	r1, [pc, #128]	@ (8000a40 <send_serialstate_notif+0xc0>)
 80009c0:	202f      	movs	r0, #47	@ 0x2f
 80009c2:	0013      	movs	r3, r2
 80009c4:	015b      	lsls	r3, r3, #5
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	18cb      	adds	r3, r1, r3
 80009cc:	181b      	adds	r3, r3, r0
 80009ce:	7819      	ldrb	r1, [r3, #0]
 80009d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <send_serialstate_notif+0xc4>)
 80009d2:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <send_serialstate_notif+0xcc>)
 80009d4:	2300      	movs	r3, #0
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	230a      	movs	r3, #10
 80009da:	f000 febd 	bl	8001758 <USBdev_SendData>
 80009de:	0003      	movs	r3, r0
 80009e0:	001a      	movs	r2, r3
		(const uint8_t *)&ssnotif, sizeof(ssnotif), 0) == 0)
 80009e2:	2301      	movs	r3, #1
 80009e4:	4053      	eors	r3, r2
 80009e6:	b2db      	uxtb	r3, r3
	if (USBdev_SendData(&usbdev, ConfigDesc.cdc[ch].cdcdesc.cdcnotif.bEndpointAddress,
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d025      	beq.n	8000a38 <send_serialstate_notif+0xb8>
	{
		cdc_data[ch].SerialStateSent = ssnotif.wSerialState & (CDC_SERIAL_STATE_TX_CARRIER | CDC_SERIAL_STATE_RX_CARRIER);	// clear all transient flags
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <send_serialstate_notif+0xc4>)
 80009ee:	891a      	ldrh	r2, [r3, #8]
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2103      	movs	r1, #3
 80009f6:	400a      	ands	r2, r1
 80009f8:	b290      	uxth	r0, r2
 80009fa:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <send_serialstate_notif+0xc8>)
 80009fc:	219c      	movs	r1, #156	@ 0x9c
 80009fe:	434b      	muls	r3, r1
 8000a00:	18d3      	adds	r3, r2, r3
 8000a02:	330c      	adds	r3, #12
 8000a04:	1c02      	adds	r2, r0, #0
 8000a06:	801a      	strh	r2, [r3, #0]
		cdc_data[ch].SerialState ^= ssnotif.wSerialState & ~(CDC_SERIAL_STATE_TX_CARRIER | CDC_SERIAL_STATE_RX_CARRIER);	// clear transient flags sent
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <send_serialstate_notif+0xc8>)
 8000a0e:	219c      	movs	r1, #156	@ 0x9c
 8000a10:	434b      	muls	r3, r1
 8000a12:	18d3      	adds	r3, r2, r3
 8000a14:	330a      	adds	r3, #10
 8000a16:	8819      	ldrh	r1, [r3, #0]
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <send_serialstate_notif+0xc4>)
 8000a1a:	891b      	ldrh	r3, [r3, #8]
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	4393      	bics	r3, r2
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	404a      	eors	r2, r1
 8000a28:	b290      	uxth	r0, r2
 8000a2a:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <send_serialstate_notif+0xc8>)
 8000a2c:	219c      	movs	r1, #156	@ 0x9c
 8000a2e:	434b      	muls	r3, r1
 8000a30:	18d3      	adds	r3, r2, r3
 8000a32:	330a      	adds	r3, #10
 8000a34:	1c02      	adds	r2, r0, #0
 8000a36:	801a      	strh	r2, [r3, #0]
	}
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	08002c10 	.word	0x08002c10
 8000a44:	2000016c 	.word	0x2000016c
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	08002ce0 	.word	0x08002ce0

08000a50 <vcom_process_input>:

//========================================================================
// overwrite for any real-world use - this is just echo for demo application
// return 1 if prompt requested
__attribute__ ((weak)) uint8_t vcom_process_input(uint8_t ch, uint8_t c)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	1dbb      	adds	r3, r7, #6
 8000a5e:	1c0a      	adds	r2, r1, #0
 8000a60:	701a      	strb	r2, [r3, #0]
#if USBD_CDC_CHANNELS
	vcom_putchar(ch, c);	// echo to the same channel
 8000a62:	1dbb      	adds	r3, r7, #6
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff ff59 	bl	8000924 <vcom_putchar>
#endif
	return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <VCP_ConnStatus>:

__attribute__ ((weak)) void VCP_ConnStatus(uint8_t ch, bool on)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	1dbb      	adds	r3, r7, #6
 8000a8a:	1c0a      	adds	r2, r1, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
	// define to control board's LED for VCP connection status signaling
}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <allow_rx>:

#endif	// USBD_CDC_CHANNELS

// enable data reception on a specified endpoint - called after received data is processed
static void allow_rx(uint8_t epn)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
	__disable_irq();
	usbdev.hwif->EnableRx(&usbdev, epn);
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <allow_rx+0x2c>)
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aac:	1dfa      	adds	r2, r7, #7
 8000aae:	7811      	ldrb	r1, [r2, #0]
 8000ab0:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <allow_rx+0x30>)
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	4798      	blx	r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000ab6:	b662      	cpsie	i
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	08002ed0 	.word	0x08002ed0
 8000ac8:	08002ce0 	.word	0x08002ce0

08000acc <usbdev_session_init>:
#endif

//========================================================================
// called on reset, suspend, resume
static void usbdev_session_init(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
#if USBD_CDC_CHANNELS
	for (uint8_t ch = 0; ch < USBD_CDC_CHANNELS; ch++)
 8000ad2:	2317      	movs	r3, #23
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e01a      	b.n	8000b12 <usbdev_session_init+0x46>
	{
		struct cdc_data_ *cdcp = &cdc_data[ch];
 8000adc:	2417      	movs	r4, #23
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	229c      	movs	r2, #156	@ 0x9c
 8000ae4:	435a      	muls	r2, r3
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <usbdev_session_init+0x5c>)
 8000ae8:	18d3      	adds	r3, r2, r3
 8000aea:	613b      	str	r3, [r7, #16]
		cdcp->session = (struct cdc_session_) {0};
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	2290      	movs	r2, #144	@ 0x90
 8000af0:	189b      	adds	r3, r3, r2
 8000af2:	220a      	movs	r2, #10
 8000af4:	2100      	movs	r1, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 f836 	bl	8002b68 <memset>
		VCP_ConnStatus(ch, 0);
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2100      	movs	r1, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ffba 	bl	8000a7c <VCP_ConnStatus>
	for (uint8_t ch = 0; ch < USBD_CDC_CHANNELS; ch++)
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	3201      	adds	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	2317      	movs	r3, #23
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d9df      	bls.n	8000adc <usbdev_session_init+0x10>
	}
#endif
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b007      	add	sp, #28
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	20000004 	.word	0x20000004

08000b2c <usbdev_reset>:

static void usbdev_reset(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	usbdev_session_init();
 8000b32:	f7ff ffcb 	bl	8000acc <usbdev_session_init>
#if USBD_CDC_CHANNELS
	for (uint8_t ch = 0; ch < USBD_CDC_CHANNELS; ch++)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e014      	b.n	8000b68 <usbdev_reset+0x3c>
	{
		struct cdc_data_ *cdcp = &cdc_data[ch];
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	229c      	movs	r2, #156	@ 0x9c
 8000b44:	435a      	muls	r2, r3
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <usbdev_reset+0x50>)
 8000b48:	18d3      	adds	r3, r2, r3
 8000b4a:	603b      	str	r3, [r7, #0]
		cdcp->ControlLineState = 0;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	811a      	strh	r2, [r3, #8]
		cdcp->ControlLineStateChanged = 0;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	73da      	strb	r2, [r3, #15]
		cdcp->LineCodingChanged = 0;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	739a      	strb	r2, [r3, #14]
	for (uint8_t ch = 0; ch < USBD_CDC_CHANNELS; ch++)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	3201      	adds	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d9e6      	bls.n	8000b3e <usbdev_reset+0x12>
	}
#endif
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	20000004 	.word	0x20000004

08000b80 <usbdev_resume>:
 * resume with old linestate, reset, resume, reset, reset
 *  -> no linestate update
 */

static void usbdev_resume(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	usbdev_session_init();
 8000b86:	f7ff ffa1 	bl	8000acc <usbdev_session_init>
#if USBD_CDC_CHANNELS
	for (uint8_t ch = 0; ch < USBD_CDC_CHANNELS; ch++)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e016      	b.n	8000bc0 <usbdev_resume+0x40>
	{
		struct cdc_data_ *cdcp = &cdc_data[ch];
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	229c      	movs	r2, #156	@ 0x9c
 8000b98:	435a      	muls	r2, r3
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <usbdev_resume+0x54>)
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	603b      	str	r3, [r7, #0]
		if ((cdcp->ControlLineState & (CDC_CTL_DTR | CDC_CTL_RTS)) == (CDC_CTL_DTR | CDC_CTL_RTS))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	891b      	ldrh	r3, [r3, #8]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d103      	bne.n	8000bb6 <usbdev_resume+0x36>
		{
			cdcp->session.connstart_timer = SIGNON_DELAY;	// display prompt after 50 ms
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2293      	movs	r2, #147	@ 0x93
 8000bb2:	2132      	movs	r1, #50	@ 0x32
 8000bb4:	5499      	strb	r1, [r3, r2]
	for (uint8_t ch = 0; ch < USBD_CDC_CHANNELS; ch++)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d9e4      	bls.n	8000b92 <usbdev_resume+0x12>
		}
	}
#endif
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <usbdev_tick>:
//========================================================================
volatile uint32_t usbdev_msec;

// called from USB interrupt at 1 kHz (SOF)
void usbdev_tick(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af02      	add	r7, sp, #8
	++usbdev_msec;
 8000bde:	4b79      	ldr	r3, [pc, #484]	@ (8000dc4 <usbdev_tick+0x1ec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	4b77      	ldr	r3, [pc, #476]	@ (8000dc4 <usbdev_tick+0x1ec>)
 8000be6:	601a      	str	r2, [r3, #0]
	{
		cdc_data[0].SerialState = dt >> 10 & 3;
		//send_serialstate_notif(0);
	}
#endif
	for (uint8_t ch = 0; ch < USBD_CDC_CHANNELS; ch++)
 8000be8:	230f      	movs	r3, #15
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e08c      	b.n	8000d0c <usbdev_tick+0x134>
	{
		struct cdc_data_ *cdcp = &cdc_data[ch];
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	229c      	movs	r2, #156	@ 0x9c
 8000bfa:	435a      	muls	r2, r3
 8000bfc:	4b72      	ldr	r3, [pc, #456]	@ (8000dc8 <usbdev_tick+0x1f0>)
 8000bfe:	18d3      	adds	r3, r2, r3
 8000c00:	60bb      	str	r3, [r7, #8]
		struct cdc_session_ *cds = &cdcp->session;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3390      	adds	r3, #144	@ 0x90
 8000c06:	607b      	str	r3, [r7, #4]

		if (cds->connstart_timer && --cds->connstart_timer == 0)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	78db      	ldrb	r3, [r3, #3]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d030      	beq.n	8000c72 <usbdev_tick+0x9a>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	78db      	ldrb	r3, [r3, #3]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	70da      	strb	r2, [r3, #3]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	78db      	ldrb	r3, [r3, #3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d126      	bne.n	8000c72 <usbdev_tick+0x9a>
		{
			cds->connected = 1;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
			VCP_ConnStatus(ch, 1);
 8000c2a:	000c      	movs	r4, r1
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2101      	movs	r1, #1
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff ff22 	bl	8000a7c <VCP_ConnStatus>
			cds->signon_rq = 1;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	705a      	strb	r2, [r3, #1]
			NVIC_SetPendingIRQ(vcomcfg[ch].rx_irqn);
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	4962      	ldr	r1, [pc, #392]	@ (8000dcc <usbdev_tick+0x1f4>)
 8000c44:	0013      	movs	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	189b      	adds	r3, r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	5c5b      	ldrb	r3, [r3, r1]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff fcad 	bl	80005b0 <__NVIC_SetPendingIRQ>
			NVIC_EnableIRQ(vcomcfg[ch].tx_irqn);
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	495c      	ldr	r1, [pc, #368]	@ (8000dcc <usbdev_tick+0x1f4>)
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	189b      	adds	r3, r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	3301      	adds	r3, #1
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fc63 	bl	8000538 <__NVIC_EnableIRQ>
		}
		if (cds->autonul_timer && --cds->autonul_timer == 0)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	795b      	ldrb	r3, [r3, #5]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d019      	beq.n	8000cae <usbdev_tick+0xd6>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	795b      	ldrb	r3, [r3, #5]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	715a      	strb	r2, [r3, #5]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	795b      	ldrb	r3, [r3, #5]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10f      	bne.n	8000cae <usbdev_tick+0xd6>
		{
			cds->autonul = 1;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2201      	movs	r2, #1
 8000c92:	711a      	strb	r2, [r3, #4]
			NVIC_SetPendingIRQ(vcomcfg[ch].rx_irqn);
 8000c94:	230f      	movs	r3, #15
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	494c      	ldr	r1, [pc, #304]	@ (8000dcc <usbdev_tick+0x1f4>)
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	189b      	adds	r3, r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	5c5b      	ldrb	r3, [r3, r1]
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fc81 	bl	80005b0 <__NVIC_SetPendingIRQ>
		}
		if (cds->TxTout && --cds->TxTout == 0)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7a5b      	ldrb	r3, [r3, #9]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d018      	beq.n	8000ce8 <usbdev_tick+0x110>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7a5b      	ldrb	r3, [r3, #9]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	725a      	strb	r2, [r3, #9]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7a5b      	ldrb	r3, [r3, #9]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10e      	bne.n	8000ce8 <usbdev_tick+0x110>
		{
			NVIC_SetPendingIRQ(vcomcfg[ch].tx_irqn);
 8000cca:	230f      	movs	r3, #15
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	493e      	ldr	r1, [pc, #248]	@ (8000dcc <usbdev_tick+0x1f4>)
 8000cd2:	0013      	movs	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	189b      	adds	r3, r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	18cb      	adds	r3, r1, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff fc64 	bl	80005b0 <__NVIC_SetPendingIRQ>
		}
		if (cdcp->SerialState != cdcp->SerialStateSent)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	895a      	ldrh	r2, [r3, #10]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	899b      	ldrh	r3, [r3, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d005      	beq.n	8000d00 <usbdev_tick+0x128>
			send_serialstate_notif(ch);
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fe40 	bl	8000980 <send_serialstate_notif>
	for (uint8_t ch = 0; ch < USBD_CDC_CHANNELS; ch++)
 8000d00:	210f      	movs	r1, #15
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	3201      	adds	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d800      	bhi.n	8000d18 <usbdev_tick+0x140>
 8000d16:	e76c      	b.n	8000bf2 <usbdev_tick+0x1a>
	}
#endif	// USBD_CDC_CHANNELS
#if USBD_HID
	if (hid_data.SampleTimer == 0)
 8000d18:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d1a:	789b      	ldrb	r3, [r3, #2]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <usbdev_tick+0x15c>
	{
		// initialize once
		hid_data.SampleTimer = HID_POLLING_INTERVAL;
 8000d20:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d22:	2214      	movs	r2, #20
 8000d24:	709a      	strb	r2, [r3, #2]
		hid_data.Idle = HID_DEFAULT_IDLE;
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d28:	227d      	movs	r2, #125	@ 0x7d
 8000d2a:	70da      	strb	r2, [r3, #3]
		hid_data.ReportTimer = HID_POLLING_INTERVAL;
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d2e:	2214      	movs	r2, #20
 8000d30:	801a      	strh	r2, [r3, #0]
 8000d32:	e015      	b.n	8000d60 <usbdev_tick+0x188>
	}
	else if (--hid_data.SampleTimer == 0)
 8000d34:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d36:	789b      	ldrb	r3, [r3, #2]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d3e:	709a      	strb	r2, [r3, #2]
 8000d40:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d42:	789b      	ldrb	r3, [r3, #2]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10b      	bne.n	8000d60 <usbdev_tick+0x188>
	{
		hid_data.SampleTimer = HID_POLLING_INTERVAL;
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d4a:	2214      	movs	r2, #20
 8000d4c:	709a      	strb	r2, [r3, #2]
		if (HIDupdateKB(&usbdev))
 8000d4e:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <usbdev_tick+0x1fc>)
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fcb7 	bl	80006c4 <HIDupdateKB>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d002      	beq.n	8000d60 <usbdev_tick+0x188>
			hid_data.InRq = 1;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	715a      	strb	r2, [r3, #5]
	}
	if (((hid_data.ReportTimer && --hid_data.ReportTimer == 0) || hid_data.InRq)
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <usbdev_tick+0x1a4>
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d72:	801a      	strh	r2, [r3, #0]
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <usbdev_tick+0x1ac>
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000d7e:	795b      	ldrb	r3, [r3, #5]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d01a      	beq.n	8000dba <usbdev_tick+0x1e2>
		&& USBdev_SendData(&usbdev, HID_IN_EP, (const uint8_t *)hid_data.InReport, sizeof(hid_data.InReport), 0) == 0)
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <usbdev_tick+0x200>)
 8000d86:	4813      	ldr	r0, [pc, #76]	@ (8000dd4 <usbdev_tick+0x1fc>)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	2185      	movs	r1, #133	@ 0x85
 8000d90:	f000 fce2 	bl	8001758 <USBdev_SendData>
 8000d94:	0003      	movs	r3, r0
 8000d96:	001a      	movs	r2, r3
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4053      	eors	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00b      	beq.n	8000dba <usbdev_tick+0x1e2>
	{
		hid_data.ReportTimer = hid_data.Idle * 4 > HID_POLLING_INTERVAL ? hid_data.Idle * 4 : HID_POLLING_INTERVAL;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000da4:	78db      	ldrb	r3, [r3, #3]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	2b14      	cmp	r3, #20
 8000daa:	d200      	bcs.n	8000dae <usbdev_tick+0x1d6>
 8000dac:	2314      	movs	r3, #20
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000db2:	801a      	strh	r2, [r3, #0]
		hid_data.InRq = 0;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <usbdev_tick+0x1f8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	715a      	strb	r2, [r3, #5]
	}

#endif	// USBD_HID
}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b005      	add	sp, #20
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	20000230 	.word	0x20000230
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	08002cc8 	.word	0x08002cc8
 8000dd0:	200001a4 	.word	0x200001a4
 8000dd4:	08002ce0 	.word	0x08002ce0
 8000dd8:	200001aa 	.word	0x200001aa

08000ddc <cdc_LineStateHandler>:

#if USBD_CDC_CHANNELS
void cdc_LineStateHandler(const struct usbdevice_ *usbd, uint8_t ch)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	000a      	movs	r2, r1
 8000de6:	1cfb      	adds	r3, r7, #3
 8000de8:	701a      	strb	r2, [r3, #0]
	// called from USB interrupt, overwrites the default handler in usb_class.c
	if ((cdc_data[ch].ControlLineState & (CDC_CTL_DTR | CDC_CTL_RTS)) == (CDC_CTL_DTR | CDC_CTL_RTS))
 8000dea:	1cfb      	adds	r3, r7, #3
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <cdc_LineStateHandler+0xb4>)
 8000df0:	219c      	movs	r1, #156	@ 0x9c
 8000df2:	434b      	muls	r3, r1
 8000df4:	18d3      	adds	r3, r2, r3
 8000df6:	3308      	adds	r3, #8
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	001a      	movs	r2, r3
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d11e      	bne.n	8000e42 <cdc_LineStateHandler+0x66>
	{
		// Note: Br@y Terminal sends DTR & RTS only when DTR goes active while RTS _is_ active
		cdc_data[ch].SerialState |= CDC_SERIAL_STATE_TX_CARRIER | CDC_SERIAL_STATE_RX_CARRIER;
 8000e04:	1cfb      	adds	r3, r7, #3
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4a21      	ldr	r2, [pc, #132]	@ (8000e90 <cdc_LineStateHandler+0xb4>)
 8000e0a:	219c      	movs	r1, #156	@ 0x9c
 8000e0c:	434b      	muls	r3, r1
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	330a      	adds	r3, #10
 8000e12:	881a      	ldrh	r2, [r3, #0]
 8000e14:	1cfb      	adds	r3, r7, #3
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2103      	movs	r1, #3
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	b290      	uxth	r0, r2
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e90 <cdc_LineStateHandler+0xb4>)
 8000e20:	219c      	movs	r1, #156	@ 0x9c
 8000e22:	434b      	muls	r3, r1
 8000e24:	18d3      	adds	r3, r2, r3
 8000e26:	330a      	adds	r3, #10
 8000e28:	1c02      	adds	r2, r0, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
		cdc_data[ch].session.connstart_timer = SIGNON_DELAY;	// display prompt after 50 ms
 8000e2c:	1cfb      	adds	r3, r7, #3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <cdc_LineStateHandler+0xb4>)
 8000e32:	2193      	movs	r1, #147	@ 0x93
 8000e34:	209c      	movs	r0, #156	@ 0x9c
 8000e36:	4343      	muls	r3, r0
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	185b      	adds	r3, r3, r1
 8000e3c:	2232      	movs	r2, #50	@ 0x32
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e019      	b.n	8000e76 <cdc_LineStateHandler+0x9a>
	}
	else
	{
		//NVIC_DisableIRQ(VCOM0_tx_IRQn);
		// should reset the state
		cdc_data[ch].session.connstart_timer = 0;	// possible hazard w/USB interrupt
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <cdc_LineStateHandler+0xb4>)
 8000e48:	2193      	movs	r1, #147	@ 0x93
 8000e4a:	209c      	movs	r0, #156	@ 0x9c
 8000e4c:	4343      	muls	r3, r0
 8000e4e:	18d3      	adds	r3, r2, r3
 8000e50:	185b      	adds	r3, r3, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
		cdc_data[ch].session.connected = 0;
 8000e56:	1cfb      	adds	r3, r7, #3
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e90 <cdc_LineStateHandler+0xb4>)
 8000e5c:	2190      	movs	r1, #144	@ 0x90
 8000e5e:	209c      	movs	r0, #156	@ 0x9c
 8000e60:	4343      	muls	r3, r0
 8000e62:	18d3      	adds	r3, r2, r3
 8000e64:	185b      	adds	r3, r3, r1
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
		VCP_ConnStatus(ch, 0);
 8000e6a:	1cfb      	adds	r3, r7, #3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2100      	movs	r1, #0
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fe03 	bl	8000a7c <VCP_ConnStatus>
	}
	cdc_data[ch].ControlLineStateChanged = 0;
 8000e76:	1cfb      	adds	r3, r7, #3
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <cdc_LineStateHandler+0xb4>)
 8000e7c:	219c      	movs	r1, #156	@ 0x9c
 8000e7e:	434b      	muls	r3, r1
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	330f      	adds	r3, #15
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000004 	.word	0x20000004

08000e94 <vcom_prompt>:
	NVIC_SetPendingIRQ(vcomcfg[ch].rx_irqn);
}

// signon/prompt display, may be customized
__attribute__ ((weak)) void vcom_prompt(uint8_t ch, bool signon)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	1c0a      	adds	r2, r1, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
	vcom_putstring(ch, signon ? vcomcfg[ch].signon : vcomcfg[ch].prompt);
 8000ea6:	1dbb      	adds	r3, r7, #6
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00a      	beq.n	8000ec4 <vcom_prompt+0x30>
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	490e      	ldr	r1, [pc, #56]	@ (8000eec <vcom_prompt+0x58>)
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	189b      	adds	r3, r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	18cb      	adds	r3, r1, r3
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	e009      	b.n	8000ed8 <vcom_prompt+0x44>
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	4908      	ldr	r1, [pc, #32]	@ (8000eec <vcom_prompt+0x58>)
 8000eca:	0013      	movs	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	189b      	adds	r3, r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	18cb      	adds	r3, r1, r3
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	1dfa      	adds	r2, r7, #7
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	0019      	movs	r1, r3
 8000ede:	0010      	movs	r0, r2
 8000ee0:	f7ff fd34 	bl	800094c <vcom_putstring>
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	08002cc8 	.word	0x08002cc8

08000ef0 <VCOM_rx_IRQHandler>:

// data reception and state change handler, priority lower than USB hw interrupt
void VCOM_rx_IRQHandler(uint8_t ch)
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	701a      	strb	r2, [r3, #0]
	if (cdc_data[ch].LineCodingChanged)
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4a97      	ldr	r2, [pc, #604]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8000f02:	219c      	movs	r1, #156	@ 0x9c
 8000f04:	434b      	muls	r3, r1
 8000f06:	18d3      	adds	r3, r2, r3
 8000f08:	330e      	adds	r3, #14
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d008      	beq.n	8000f22 <VCOM_rx_IRQHandler+0x32>
	{
		cdc_data[ch].LineCodingChanged = 0;
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4a92      	ldr	r2, [pc, #584]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8000f16:	219c      	movs	r1, #156	@ 0x9c
 8000f18:	434b      	muls	r3, r1
 8000f1a:	18d3      	adds	r3, r2, r3
 8000f1c:	330e      	adds	r3, #14
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
	}
	if (cdc_data[ch].ControlLineStateChanged)
	{
		// handle if not handled by LineStateHandler
	}
	if (cdc_data[ch].session.RxLength)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4a8e      	ldr	r2, [pc, #568]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8000f28:	2196      	movs	r1, #150	@ 0x96
 8000f2a:	209c      	movs	r0, #156	@ 0x9c
 8000f2c:	4343      	muls	r3, r0
 8000f2e:	18d3      	adds	r3, r2, r3
 8000f30:	185b      	adds	r3, r3, r1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d100      	bne.n	8000f3c <VCOM_rx_IRQHandler+0x4c>
 8000f3a:	e097      	b.n	800106c <VCOM_rx_IRQHandler+0x17c>
	{
		cdc_data[ch].session.connected = 1;
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4a87      	ldr	r2, [pc, #540]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8000f42:	2190      	movs	r1, #144	@ 0x90
 8000f44:	209c      	movs	r0, #156	@ 0x9c
 8000f46:	4343      	muls	r3, r0
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	185b      	adds	r3, r3, r1
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
		VCP_ConnStatus(ch, 1);
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff fd90 	bl	8000a7c <VCP_ConnStatus>
		uint8_t *rxptr = cdc_data[ch].RxData; //
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	229c      	movs	r2, #156	@ 0x9c
 8000f62:	4353      	muls	r3, r2
 8000f64:	3310      	adds	r3, #16
 8000f66:	001a      	movs	r2, r3
 8000f68:	4b7d      	ldr	r3, [pc, #500]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8000f6a:	18d3      	adds	r3, r2, r3
 8000f6c:	60fb      	str	r3, [r7, #12]
		uint8_t pival = 0;
 8000f6e:	230b      	movs	r3, #11
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < cdc_data[ch].session.RxLength; i++)
 8000f76:	230a      	movs	r3, #10
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e030      	b.n	8000fe2 <VCOM_rx_IRQHandler+0xf2>
		{
			pival = vcom_process_input(ch, *rxptr++);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60fa      	str	r2, [r7, #12]
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	250b      	movs	r5, #11
 8000f8a:	197c      	adds	r4, r7, r5
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff fd5c 	bl	8000a50 <vcom_process_input>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	7023      	strb	r3, [r4, #0]
			cdc_data[ch].session.prompt_rq |= pival & PIRET_PROMPTRQ;
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4a6f      	ldr	r2, [pc, #444]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8000fa2:	2192      	movs	r1, #146	@ 0x92
 8000fa4:	209c      	movs	r0, #156	@ 0x9c
 8000fa6:	4343      	muls	r3, r0
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	185b      	adds	r3, r3, r1
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	0019      	movs	r1, r3
 8000fb0:	197b      	adds	r3, r7, r5
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	000a      	movs	r2, r1
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	1e51      	subs	r1, r2, #1
 8000fc2:	418a      	sbcs	r2, r1
 8000fc4:	b2d4      	uxtb	r4, r2
 8000fc6:	4a66      	ldr	r2, [pc, #408]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8000fc8:	2192      	movs	r1, #146	@ 0x92
 8000fca:	209c      	movs	r0, #156	@ 0x9c
 8000fcc:	4343      	muls	r3, r0
 8000fce:	18d3      	adds	r3, r2, r3
 8000fd0:	185b      	adds	r3, r3, r1
 8000fd2:	1c22      	adds	r2, r4, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < cdc_data[ch].session.RxLength; i++)
 8000fd6:	210a      	movs	r1, #10
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	3201      	adds	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8000fe8:	2196      	movs	r1, #150	@ 0x96
 8000fea:	209c      	movs	r0, #156	@ 0x9c
 8000fec:	4343      	muls	r3, r0
 8000fee:	18d3      	adds	r3, r2, r3
 8000ff0:	185b      	adds	r3, r3, r1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	220a      	movs	r2, #10
 8000ff8:	18ba      	adds	r2, r7, r2
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3bf      	bcc.n	8000f80 <VCOM_rx_IRQHandler+0x90>
		}
		cdc_data[ch].session.RxLength = 0;
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4a56      	ldr	r2, [pc, #344]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8001006:	2196      	movs	r1, #150	@ 0x96
 8001008:	209c      	movs	r0, #156	@ 0x9c
 800100a:	4343      	muls	r3, r0
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	185b      	adds	r3, r3, r1
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
		cdc_data[ch].session.autonul = 0;
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4a51      	ldr	r2, [pc, #324]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 800101a:	2194      	movs	r1, #148	@ 0x94
 800101c:	209c      	movs	r0, #156	@ 0x9c
 800101e:	4343      	muls	r3, r0
 8001020:	18d3      	adds	r3, r2, r3
 8001022:	185b      	adds	r3, r3, r1
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
		cdc_data[ch].session.autonul_timer = (pival & PIRET_AUTONUL) ? AUTONUL_TOUT : 0;
 8001028:	230b      	movs	r3, #11
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2210      	movs	r2, #16
 8001030:	4013      	ands	r3, r2
 8001032:	d001      	beq.n	8001038 <VCOM_rx_IRQHandler+0x148>
 8001034:	2405      	movs	r4, #5
 8001036:	e000      	b.n	800103a <VCOM_rx_IRQHandler+0x14a>
 8001038:	2400      	movs	r4, #0
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4a48      	ldr	r2, [pc, #288]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8001040:	2195      	movs	r1, #149	@ 0x95
 8001042:	209c      	movs	r0, #156	@ 0x9c
 8001044:	4343      	muls	r3, r0
 8001046:	18d3      	adds	r3, r2, r3
 8001048:	185b      	adds	r3, r3, r1
 800104a:	1c22      	adds	r2, r4, #0
 800104c:	701a      	strb	r2, [r3, #0]
		allow_rx(ConfigDesc.cdc[ch].cdcdesc.cdcout.bEndpointAddress);
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	4944      	ldr	r1, [pc, #272]	@ (8001164 <VCOM_rx_IRQHandler+0x274>)
 8001054:	2046      	movs	r0, #70	@ 0x46
 8001056:	0013      	movs	r3, r2
 8001058:	015b      	lsls	r3, r3, #5
 800105a:	189b      	adds	r3, r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	18cb      	adds	r3, r1, r3
 8001060:	181b      	adds	r3, r3, r0
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff fd17 	bl	8000a98 <allow_rx>
 800106a:	e035      	b.n	80010d8 <VCOM_rx_IRQHandler+0x1e8>
	}
	else if (cdc_data[ch].session.autonul)
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4a3b      	ldr	r2, [pc, #236]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8001072:	2194      	movs	r1, #148	@ 0x94
 8001074:	209c      	movs	r0, #156	@ 0x9c
 8001076:	4343      	muls	r3, r0
 8001078:	18d3      	adds	r3, r2, r3
 800107a:	185b      	adds	r3, r3, r1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d02a      	beq.n	80010d8 <VCOM_rx_IRQHandler+0x1e8>
	{
		cdc_data[ch].session.autonul = 0;
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4a36      	ldr	r2, [pc, #216]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8001088:	2194      	movs	r1, #148	@ 0x94
 800108a:	209c      	movs	r0, #156	@ 0x9c
 800108c:	4343      	muls	r3, r0
 800108e:	18d3      	adds	r3, r2, r3
 8001090:	185b      	adds	r3, r3, r1
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
		cdc_data[ch].session.prompt_rq |= vcom_process_input(ch, 0) & PIRET_PROMPTRQ;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2100      	movs	r1, #0
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff fcd7 	bl	8000a50 <vcom_process_input>
 80010a2:	0003      	movs	r3, r0
 80010a4:	001a      	movs	r2, r3
 80010a6:	2301      	movs	r3, #1
 80010a8:	4013      	ands	r3, r2
 80010aa:	1dfa      	adds	r2, r7, #7
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	492c      	ldr	r1, [pc, #176]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 80010b0:	2092      	movs	r0, #146	@ 0x92
 80010b2:	249c      	movs	r4, #156	@ 0x9c
 80010b4:	4362      	muls	r2, r4
 80010b6:	188a      	adds	r2, r1, r2
 80010b8:	1812      	adds	r2, r2, r0
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	431a      	orrs	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	1e51      	subs	r1, r2, #1
 80010c4:	418a      	sbcs	r2, r1
 80010c6:	b2d4      	uxtb	r4, r2
 80010c8:	4a25      	ldr	r2, [pc, #148]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 80010ca:	2192      	movs	r1, #146	@ 0x92
 80010cc:	209c      	movs	r0, #156	@ 0x9c
 80010ce:	4343      	muls	r3, r0
 80010d0:	18d3      	adds	r3, r2, r3
 80010d2:	185b      	adds	r3, r3, r1
 80010d4:	1c22      	adds	r2, r4, #0
 80010d6:	701a      	strb	r2, [r3, #0]
	}
	if (cdc_data[ch].session.signon_rq)
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4a20      	ldr	r2, [pc, #128]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 80010de:	2191      	movs	r1, #145	@ 0x91
 80010e0:	209c      	movs	r0, #156	@ 0x9c
 80010e2:	4343      	muls	r3, r0
 80010e4:	18d3      	adds	r3, r2, r3
 80010e6:	185b      	adds	r3, r3, r1
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d019      	beq.n	8001122 <VCOM_rx_IRQHandler+0x232>
	{
		cdc_data[ch].session.signon_rq = 0;
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 80010f4:	2191      	movs	r1, #145	@ 0x91
 80010f6:	209c      	movs	r0, #156	@ 0x9c
 80010f8:	4343      	muls	r3, r0
 80010fa:	18d3      	adds	r3, r2, r3
 80010fc:	185b      	adds	r3, r3, r1
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
		vcom_prompt(ch, 1);
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2101      	movs	r1, #1
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff fec3 	bl	8000e94 <vcom_prompt>
		cdc_data[ch].session.prompt_rq = 1;
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4a13      	ldr	r2, [pc, #76]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8001114:	2192      	movs	r1, #146	@ 0x92
 8001116:	209c      	movs	r0, #156	@ 0x9c
 8001118:	4343      	muls	r3, r0
 800111a:	18d3      	adds	r3, r2, r3
 800111c:	185b      	adds	r3, r3, r1
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
	}
	if (cdc_data[ch].session.prompt_rq)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 8001128:	2192      	movs	r1, #146	@ 0x92
 800112a:	209c      	movs	r0, #156	@ 0x9c
 800112c:	4343      	muls	r3, r0
 800112e:	18d3      	adds	r3, r2, r3
 8001130:	185b      	adds	r3, r3, r1
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00f      	beq.n	8001158 <VCOM_rx_IRQHandler+0x268>
	{
		cdc_data[ch].session.prompt_rq = 0;
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <VCOM_rx_IRQHandler+0x270>)
 800113e:	2192      	movs	r1, #146	@ 0x92
 8001140:	209c      	movs	r0, #156	@ 0x9c
 8001142:	4343      	muls	r3, r0
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	185b      	adds	r3, r3, r1
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
		vcom_prompt(ch, 0);
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2100      	movs	r1, #0
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff fe9e 	bl	8000e94 <vcom_prompt>
	}
}
 8001158:	46c0      	nop			@ (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b004      	add	sp, #16
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	20000004 	.word	0x20000004
 8001164:	08002c10 	.word	0x08002c10

08001168 <RCC_CRS_IRQHandler>:

void VCOM0_rx_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	VCOM_rx_IRQHandler(0);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff febf 	bl	8000ef0 <VCOM_rx_IRQHandler>
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <VCOM_tx_IRQHandler>:

// transmit handler, must have the same priority as USB hw interrupt
void VCOM_tx_IRQHandler(uint8_t ch)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af02      	add	r7, sp, #8
 800117e:	0002      	movs	r2, r0
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	701a      	strb	r2, [r3, #0]
	struct cdc_data_ *cdp = &cdc_data[ch];
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	229c      	movs	r2, #156	@ 0x9c
 800118a:	435a      	muls	r2, r3
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <VCOM_tx_IRQHandler+0xa0>)
 800118e:	18d3      	adds	r3, r2, r3
 8001190:	60fb      	str	r3, [r7, #12]

	NVIC_DisableIRQ(vcomcfg[ch].tx_irqn);
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4921      	ldr	r1, [pc, #132]	@ (800121c <VCOM_tx_IRQHandler+0xa4>)
 8001198:	0013      	movs	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	189b      	adds	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	18cb      	adds	r3, r1, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff f9df 	bl	800056c <__NVIC_DisableIRQ>
//	if (cdp->TxLength)
	{
		if (cdp->session.TxLength == CDC_DATA_EP_SIZE)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2298      	movs	r2, #152	@ 0x98
 80011b2:	5c9b      	ldrb	r3, [r3, r2]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b40      	cmp	r3, #64	@ 0x40
 80011b8:	d10d      	bne.n	80011d6 <VCOM_tx_IRQHandler+0x5e>
			NVIC_SetPendingIRQ(vcomcfg[ch].tx_irqn);	// another packet must follow, data or ZLP
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	4917      	ldr	r1, [pc, #92]	@ (800121c <VCOM_tx_IRQHandler+0xa4>)
 80011c0:	0013      	movs	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	189b      	adds	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	18cb      	adds	r3, r1, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff f9ed 	bl	80005b0 <__NVIC_SetPendingIRQ>
		USBdev_SendData(&usbdev, ConfigDesc.cdc[ch].cdcdesc.cdcin.bEndpointAddress,
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4911      	ldr	r1, [pc, #68]	@ (8001220 <VCOM_tx_IRQHandler+0xa8>)
 80011dc:	203f      	movs	r0, #63	@ 0x3f
 80011de:	0013      	movs	r3, r2
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	189b      	adds	r3, r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	18cb      	adds	r3, r1, r3
 80011e8:	181b      	adds	r3, r3, r0
 80011ea:	7819      	ldrb	r1, [r3, #0]
			cdp->TxData, cdp->session.TxLength, 0);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3350      	adds	r3, #80	@ 0x50
 80011f0:	001a      	movs	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2098      	movs	r0, #152	@ 0x98
 80011f6:	5c1b      	ldrb	r3, [r3, r0]
 80011f8:	b2db      	uxtb	r3, r3
		USBdev_SendData(&usbdev, ConfigDesc.cdc[ch].cdcdesc.cdcin.bEndpointAddress,
 80011fa:	001c      	movs	r4, r3
 80011fc:	4809      	ldr	r0, [pc, #36]	@ (8001224 <VCOM_tx_IRQHandler+0xac>)
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	0023      	movs	r3, r4
 8001204:	f000 faa8 	bl	8001758 <USBdev_SendData>
		cdp->session.TxLength = 0;	// clear counter
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2298      	movs	r2, #152	@ 0x98
 800120c:	2100      	movs	r1, #0
 800120e:	5499      	strb	r1, [r3, r2]
	}
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b005      	add	sp, #20
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	20000004 	.word	0x20000004
 800121c:	08002cc8 	.word	0x08002cc8
 8001220:	08002c10 	.word	0x08002c10
 8001224:	08002ce0 	.word	0x08002ce0

08001228 <ADC1_IRQHandler>:

void VCOM0_tx_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	VCOM_tx_IRQHandler(0);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ffa3 	bl	8001178 <VCOM_tx_IRQHandler>
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <TIM16_IRQHandler>:

#if USBD_CDC_CHANNELS > 1
void VCOM1_rx_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	VCOM_rx_IRQHandler(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff fe57 	bl	8000ef0 <VCOM_rx_IRQHandler>
}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <TIM17_IRQHandler>:

// transmit handler, must have the same priority as USB hw interrupt
void VCOM1_tx_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	VCOM_tx_IRQHandler(1);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff ff93 	bl	8001178 <VCOM_tx_IRQHandler>
}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HIDoutHandler>:
#endif
};

// not used, report send via control pipe
static void HIDoutHandler(const struct usbdevice_ *usbd, uint8_t epn)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	000a      	movs	r2, r1
 8001262:	1cfb      	adds	r3, r7, #3
 8001264:	701a      	strb	r2, [r3, #0]
	hid_data.OutReport[2] = hid_data.OutReport[0];
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <HIDoutHandler+0x20>)
 8001268:	7b9a      	ldrb	r2, [r3, #14]
 800126a:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HIDoutHandler+0x20>)
 800126c:	741a      	strb	r2, [r3, #16]
}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	200001a4 	.word	0x200001a4

0800127c <DataReceivedHandler>:

// Application routines ==================================================

// called form USB hw interrupt
void DataReceivedHandler(const struct usbdevice_ *usbd, uint8_t epn)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	000a      	movs	r2, r1
 8001286:	1cfb      	adds	r3, r7, #3
 8001288:	701a      	strb	r2, [r3, #0]
	uint16_t length = usbd->outep[epn].count;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	1cfb      	adds	r3, r7, #3
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	18d2      	adds	r2, r2, r3
 8001296:	210e      	movs	r1, #14
 8001298:	187b      	adds	r3, r7, r1
 800129a:	8892      	ldrh	r2, [r2, #4]
 800129c:	801a      	strh	r2, [r3, #0]
	if (length)
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d01d      	beq.n	80012e2 <DataReceivedHandler+0x66>
			USBdev_SendData(usbd, CDC0_DATA_IN_EP, (const uint8_t *)s, length, 1);
		}
		else
#endif
		{
			switch (epn)
 80012a6:	1cfb      	adds	r3, r7, #3
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d002      	beq.n	80012b4 <DataReceivedHandler+0x38>
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00b      	beq.n	80012ca <DataReceivedHandler+0x4e>
			}
		}
	}
	else
		usbd->hwif->EnableRx(usbd, epn);
}
 80012b2:	e01f      	b.n	80012f4 <DataReceivedHandler+0x78>
				cdc_data[0].session.RxLength = length;
 80012b4:	230e      	movs	r3, #14
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b2d9      	uxtb	r1, r3
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <DataReceivedHandler+0x80>)
 80012be:	2296      	movs	r2, #150	@ 0x96
 80012c0:	5499      	strb	r1, [r3, r2]
				NVIC_SetPendingIRQ(VCOM0_rx_IRQn);
 80012c2:	2004      	movs	r0, #4
 80012c4:	f7ff f974 	bl	80005b0 <__NVIC_SetPendingIRQ>
				break;
 80012c8:	e014      	b.n	80012f4 <DataReceivedHandler+0x78>
				cdc_data[1].session.RxLength = length;
 80012ca:	230e      	movs	r3, #14
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b2d9      	uxtb	r1, r3
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <DataReceivedHandler+0x80>)
 80012d4:	2399      	movs	r3, #153	@ 0x99
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	54d1      	strb	r1, [r2, r3]
				NVIC_SetPendingIRQ(VCOM1_rx_IRQn);
 80012da:	2015      	movs	r0, #21
 80012dc:	f7ff f968 	bl	80005b0 <__NVIC_SetPendingIRQ>
				break;
 80012e0:	e008      	b.n	80012f4 <DataReceivedHandler+0x78>
		usbd->hwif->EnableRx(usbd, epn);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	1cfa      	adds	r2, r7, #3
 80012ea:	7811      	ldrb	r1, [r2, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	0010      	movs	r0, r2
 80012f0:	4798      	blx	r3
}
 80012f2:	e7ff      	b.n	80012f4 <DataReceivedHandler+0x78>
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b004      	add	sp, #16
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000004 	.word	0x20000004

08001300 <DataSentHandler>:

// called form USB hw interrupt
void DataSentHandler(const struct usbdevice_ *usbd, uint8_t epn)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	000a      	movs	r2, r1
 800130a:	1cfb      	adds	r3, r7, #3
 800130c:	701a      	strb	r2, [r3, #0]
	switch (epn)
 800130e:	1cfb      	adds	r3, r7, #3
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b82      	cmp	r3, #130	@ 0x82
 8001314:	d002      	beq.n	800131c <DataSentHandler+0x1c>
 8001316:	2b84      	cmp	r3, #132	@ 0x84
 8001318:	d004      	beq.n	8001324 <DataSentHandler+0x24>
#endif	// USBD_CDC_CHANNELS > 1
#endif	// USBD_CDC_CHANNELS
	default:

	}
}
 800131a:	e007      	b.n	800132c <DataSentHandler+0x2c>
		NVIC_EnableIRQ(VCOM0_tx_IRQn);
 800131c:	200c      	movs	r0, #12
 800131e:	f7ff f90b 	bl	8000538 <__NVIC_EnableIRQ>
		break;
 8001322:	e003      	b.n	800132c <DataSentHandler+0x2c>
		NVIC_EnableIRQ(VCOM1_tx_IRQn);
 8001324:	2016      	movs	r0, #22
 8001326:	f7ff f907 	bl	8000538 <__NVIC_EnableIRQ>
		break;
 800132a:	46c0      	nop			@ (mov r8, r8)
}
 800132c:	46c0      	nop			@ (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}

08001334 <USBapp_Init>:
#endif
};

// Init routine to start USB device =================================
void USBapp_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
#if USBD_CDC_CHANNELS
	// Tx interrupts are enabled when the device is connected
	NVIC_SetPriority(VCOM0_tx_IRQn, USB_IRQ_PRI);
 8001338:	2102      	movs	r1, #2
 800133a:	200c      	movs	r0, #12
 800133c:	f7ff f954 	bl	80005e8 <__NVIC_SetPriority>
	NVIC_SetPriority(VCOM0_rx_IRQn, USB_IRQ_PRI + 1);
 8001340:	2103      	movs	r1, #3
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff f950 	bl	80005e8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(VCOM0_rx_IRQn);
 8001348:	2004      	movs	r0, #4
 800134a:	f7ff f8f5 	bl	8000538 <__NVIC_EnableIRQ>
#if USBD_CDC_CHANNELS > 1
	NVIC_SetPriority(VCOM1_tx_IRQn, USB_IRQ_PRI);
 800134e:	2102      	movs	r1, #2
 8001350:	2016      	movs	r0, #22
 8001352:	f7ff f949 	bl	80005e8 <__NVIC_SetPriority>
	NVIC_SetPriority(VCOM1_rx_IRQn, USB_IRQ_PRI + 1);
 8001356:	2103      	movs	r1, #3
 8001358:	2015      	movs	r0, #21
 800135a:	f7ff f945 	bl	80005e8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(VCOM1_rx_IRQn);
 800135e:	2015      	movs	r0, #21
 8001360:	f7ff f8ea 	bl	8000538 <__NVIC_EnableIRQ>
#if USBD_PRINTER
	NVIC_SetPriority(PRN_rx_IRQn, USB_IRQ_PRI + 1);
	NVIC_EnableIRQ(PRN_rx_IRQn);
#endif

	NVIC_SetPriority((IRQn_Type)usbdev.cfg->irqn, USB_IRQ_PRI);
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <USBapp_Init+0x50>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	2102      	movs	r1, #2
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff f93b 	bl	80005e8 <__NVIC_SetPriority>
	usbdev.hwif->Init(&usbdev);
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <USBapp_Init+0x54>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <USBapp_Init+0x58>)
 8001378:	0010      	movs	r0, r2
 800137a:	4798      	blx	r3
}
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	08002e3c 	.word	0x08002e3c
 8001388:	08002ed0 	.word	0x08002ed0
 800138c:	08002ce0 	.word	0x08002ce0

08001390 <USB_DRD_FS_IRQHandler>:
	usbdev.hwif->DeInit(&usbdev);
}

// USB interrupt routine - invokes general USB interrupt handler passing device structure pointer to it
void USB_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	usbdev.hwif->IRQHandler(&usbdev);
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <USB_DRD_FS_IRQHandler+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a03      	ldr	r2, [pc, #12]	@ (80013a8 <USB_DRD_FS_IRQHandler+0x18>)
 800139a:	0010      	movs	r0, r2
 800139c:	4798      	blx	r3
}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08002ed0 	.word	0x08002ed0
 80013a8:	08002ce0 	.word	0x08002ce0

080013ac <USBclass_ClearEPStall>:
    */
}

 // class-specific Clear EP Stall handler called by usb_dev.c
void USBclass_ClearEPStall(const struct usbdevice_ *usbd, uint8_t epaddr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	000a      	movs	r2, r1
 80013b6:	1cfb      	adds	r3, r7, #3
 80013b8:	701a      	strb	r2, [r3, #0]
	uint8_t epn = epaddr & EPNUMMSK;
 80013ba:	200f      	movs	r0, #15
 80013bc:	183b      	adds	r3, r7, r0
 80013be:	1cfa      	adds	r2, r7, #3
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	2107      	movs	r1, #7
 80013c4:	400a      	ands	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
	uint8_t interface = epaddr & EP_IS_IN ? usbd->cfg->inepcfg[epn].ifidx : usbd->cfg->outepcfg[epn].ifidx;
 80013c8:	1cfb      	adds	r3, r7, #3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	da08      	bge.n	80013e4 <USBclass_ClearEPStall+0x38>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	18d3      	adds	r3, r2, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	e008      	b.n	80013f6 <USBclass_ClearEPStall+0x4a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	230f      	movs	r3, #15
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	18d3      	adds	r3, r2, r3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	210e      	movs	r1, #14
 80013f8:	187a      	adds	r2, r7, r1
 80013fa:	7013      	strb	r3, [r2, #0]
	uint8_t classid = usbd->cfg->ifassoc[interface].classid;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	187b      	adds	r3, r7, r1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	18d3      	adds	r3, r2, r3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	071b      	lsls	r3, r3, #28
 800140c:	0f1b      	lsrs	r3, r3, #28
 800140e:	b2da      	uxtb	r2, r3
 8001410:	230d      	movs	r3, #13
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	701a      	strb	r2, [r3, #0]
	if (classid == USB_CLASS_STORAGE)
	{
	}
}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b004      	add	sp, #16
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <USBclass_HandleRequest>:

void USBclass_HandleRequest(const struct usbdevice_ *usbd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	USB_SetupPacket *req = &usbd->devdata->req;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	3306      	adds	r3, #6
 800142e:	613b      	str	r3, [r7, #16]
	
	switch (req->bmRequestType.Recipient)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	06db      	lsls	r3, r3, #27
 8001436:	0edb      	lsrs	r3, r3, #27
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d000      	beq.n	8001440 <USBclass_HandleRequest+0x20>
 800143e:	e16e      	b.n	800171e <USBclass_HandleRequest+0x2fe>
	{
	case USB_RQREC_INTERFACE:
		;
		uint8_t interface = req->wIndex.b.l;
 8001440:	2117      	movs	r1, #23
 8001442:	187b      	adds	r3, r7, r1
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	7912      	ldrb	r2, [r2, #4]
 8001448:	701a      	strb	r2, [r3, #0]

		// handle special case of printer request with interface number in wIndex high byte
		if (req->bRequest == PRNRQ_GET_DEVICE_ID && req->wIndex.b.l == 0 && req->wIndex.b.h)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10b      	bne.n	800146a <USBclass_HandleRequest+0x4a>
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	791b      	ldrb	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d107      	bne.n	800146a <USBclass_HandleRequest+0x4a>
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	795b      	ldrb	r3, [r3, #5]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <USBclass_HandleRequest+0x4a>
			interface = req->wIndex.b.h;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	7952      	ldrb	r2, [r2, #5]
 8001468:	701a      	strb	r2, [r3, #0]

		if (interface < USBD_NUM_INTERFACES)
 800146a:	2117      	movs	r1, #23
 800146c:	187b      	adds	r3, r7, r1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d900      	bls.n	8001476 <USBclass_HandleRequest+0x56>
 8001474:	e14d      	b.n	8001712 <USBclass_HandleRequest+0x2f2>
		{
			uint8_t classid = usbd->cfg->ifassoc[interface].classid;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	187b      	adds	r3, r7, r1
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	071b      	lsls	r3, r3, #28
 8001486:	0f1b      	lsrs	r3, r3, #28
 8001488:	b2da      	uxtb	r2, r3
 800148a:	210f      	movs	r1, #15
 800148c:	187b      	adds	r3, r7, r1
 800148e:	701a      	strb	r2, [r3, #0]
			switch (classid)
 8001490:	187b      	adds	r3, r7, r1
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b08      	cmp	r3, #8
 8001496:	d007      	beq.n	80014a8 <USBclass_HandleRequest+0x88>
 8001498:	dd00      	ble.n	800149c <USBclass_HandleRequest+0x7c>
 800149a:	e135      	b.n	8001708 <USBclass_HandleRequest+0x2e8>
 800149c:	2b02      	cmp	r3, #2
 800149e:	d003      	beq.n	80014a8 <USBclass_HandleRequest+0x88>
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d100      	bne.n	80014a6 <USBclass_HandleRequest+0x86>
 80014a4:	e0c1      	b.n	800162a <USBclass_HandleRequest+0x20a>
 80014a6:	e12f      	b.n	8001708 <USBclass_HandleRequest+0x2e8>
#endif

#if USBD_CDC_CHANNELS
			case USB_CLASS_COMMUNICATIONS:	// ACM requests are sent via control interface
				;	// get CDC function index (multiple CDC channels support)
				uint8_t funidx = usbd->cfg->ifassoc[interface].funidx;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	2317      	movs	r3, #23
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	061b      	lsls	r3, r3, #24
 80014ba:	0f1b      	lsrs	r3, r3, #28
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	230e      	movs	r3, #14
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	701a      	strb	r2, [r3, #0]
				switch (req->bRequest)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	785b      	ldrb	r3, [r3, #1]
 80014c8:	2b23      	cmp	r3, #35	@ 0x23
 80014ca:	d100      	bne.n	80014ce <USBclass_HandleRequest+0xae>
 80014cc:	e0a2      	b.n	8001614 <USBclass_HandleRequest+0x1f4>
 80014ce:	dd00      	ble.n	80014d2 <USBclass_HandleRequest+0xb2>
 80014d0:	e0a5      	b.n	800161e <USBclass_HandleRequest+0x1fe>
 80014d2:	2b22      	cmp	r3, #34	@ 0x22
 80014d4:	d100      	bne.n	80014d8 <USBclass_HandleRequest+0xb8>
 80014d6:	e06b      	b.n	80015b0 <USBclass_HandleRequest+0x190>
 80014d8:	dd00      	ble.n	80014dc <USBclass_HandleRequest+0xbc>
 80014da:	e0a0      	b.n	800161e <USBclass_HandleRequest+0x1fe>
 80014dc:	2b20      	cmp	r3, #32
 80014de:	d002      	beq.n	80014e6 <USBclass_HandleRequest+0xc6>
 80014e0:	2b21      	cmp	r3, #33	@ 0x21
 80014e2:	d04e      	beq.n	8001582 <USBclass_HandleRequest+0x162>
 80014e4:	e09b      	b.n	800161e <USBclass_HandleRequest+0x1fe>
				{
				case CDCRQ_SET_LINE_CODING:        //0x20
					if (memcmp(&usbd->cdc_data[funidx].LineCoding, usbd->outep[0].ptr, MIN(req->wLength, 7)))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ea:	230e      	movs	r3, #14
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	219c      	movs	r1, #156	@ 0x9c
 80014f2:	434b      	muls	r3, r1
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	0018      	movs	r0, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	6819      	ldr	r1, [r3, #0]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	88db      	ldrh	r3, [r3, #6]
 8001502:	1c1a      	adds	r2, r3, #0
 8001504:	b293      	uxth	r3, r2
 8001506:	2b07      	cmp	r3, #7
 8001508:	d901      	bls.n	800150e <USBclass_HandleRequest+0xee>
 800150a:	2307      	movs	r3, #7
 800150c:	1c1a      	adds	r2, r3, #0
 800150e:	b293      	uxth	r3, r2
 8001510:	001a      	movs	r2, r3
 8001512:	f001 fb1b 	bl	8002b4c <memcmp>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d02e      	beq.n	8001578 <USBclass_HandleRequest+0x158>
					{
						memcpy(&usbd->cdc_data[funidx].LineCoding, usbd->outep[0].ptr, MIN(req->wLength, 7));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151e:	230e      	movs	r3, #14
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	219c      	movs	r1, #156	@ 0x9c
 8001526:	434b      	muls	r3, r1
 8001528:	18d3      	adds	r3, r2, r3
 800152a:	0018      	movs	r0, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	88db      	ldrh	r3, [r3, #6]
 8001536:	1c1a      	adds	r2, r3, #0
 8001538:	b293      	uxth	r3, r2
 800153a:	2b07      	cmp	r3, #7
 800153c:	d901      	bls.n	8001542 <USBclass_HandleRequest+0x122>
 800153e:	2307      	movs	r3, #7
 8001540:	1c1a      	adds	r2, r3, #0
 8001542:	b293      	uxth	r3, r2
 8001544:	001a      	movs	r2, r3
 8001546:	f001 fb3b 	bl	8002bc0 <memcpy>
						usbd->cdc_data[funidx].LineCodingChanged = 1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800154e:	200e      	movs	r0, #14
 8001550:	183b      	adds	r3, r7, r0
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	219c      	movs	r1, #156	@ 0x9c
 8001556:	434b      	muls	r3, r1
 8001558:	18d3      	adds	r3, r2, r3
 800155a:	2201      	movs	r2, #1
 800155c:	739a      	strb	r2, [r3, #14]
						if (usbd->cdc_service->SetLineCoding)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <USBclass_HandleRequest+0x158>
							usbd->cdc_service->SetLineCoding(usbd, funidx);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	183a      	adds	r2, r7, r0
 8001570:	7811      	ldrb	r1, [r2, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	0010      	movs	r0, r2
 8001576:	4798      	blx	r3
					}
					USBdev_SendStatusOK(usbd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0018      	movs	r0, r3
 800157c:	f000 f980 	bl	8001880 <USBdev_SendStatusOK>
					break;
 8001580:	e052      	b.n	8001628 <USBclass_HandleRequest+0x208>

				case CDCRQ_GET_LINE_CODING:        //0x21
					USBdev_SendStatus(usbd, (const uint8_t *)&usbd->cdc_data[funidx].LineCoding, MIN(req->wLength, 7), 0);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001586:	230e      	movs	r3, #14
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	219c      	movs	r1, #156	@ 0x9c
 800158e:	434b      	muls	r3, r1
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	0019      	movs	r1, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	88db      	ldrh	r3, [r3, #6]
 8001598:	1c1a      	adds	r2, r3, #0
 800159a:	b293      	uxth	r3, r2
 800159c:	2b07      	cmp	r3, #7
 800159e:	d901      	bls.n	80015a4 <USBclass_HandleRequest+0x184>
 80015a0:	2307      	movs	r3, #7
 80015a2:	1c1a      	adds	r2, r3, #0
 80015a4:	b292      	uxth	r2, r2
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	2300      	movs	r3, #0
 80015aa:	f000 f94b 	bl	8001844 <USBdev_SendStatus>
					break;
 80015ae:	e03b      	b.n	8001628 <USBclass_HandleRequest+0x208>

				case CDCRQ_SET_CONTROL_LINE_STATE:         //0x22
					if (usbd->cdc_data[funidx].ControlLineState != req->wValue.w)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b4:	200e      	movs	r0, #14
 80015b6:	183b      	adds	r3, r7, r0
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	219c      	movs	r1, #156	@ 0x9c
 80015bc:	434b      	muls	r3, r1
 80015be:	18d3      	adds	r3, r2, r3
 80015c0:	891a      	ldrh	r2, [r3, #8]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	885b      	ldrh	r3, [r3, #2]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d01f      	beq.n	800160a <USBclass_HandleRequest+0x1ea>
					{
						usbd->cdc_data[funidx].ControlLineState = req->wValue.w;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ce:	183b      	adds	r3, r7, r0
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	219c      	movs	r1, #156	@ 0x9c
 80015d4:	434b      	muls	r3, r1
 80015d6:	18d3      	adds	r3, r2, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	8852      	ldrh	r2, [r2, #2]
 80015dc:	811a      	strh	r2, [r3, #8]
						usbd->cdc_data[funidx].ControlLineStateChanged = 1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e2:	183b      	adds	r3, r7, r0
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	219c      	movs	r1, #156	@ 0x9c
 80015e8:	434b      	muls	r3, r1
 80015ea:	18d3      	adds	r3, r2, r3
 80015ec:	2201      	movs	r2, #1
 80015ee:	73da      	strb	r2, [r3, #15]
						if (usbd->cdc_service->SetControlLineState)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <USBclass_HandleRequest+0x1ea>
							usbd->cdc_service->SetControlLineState(usbd, funidx);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	183a      	adds	r2, r7, r0
 8001602:	7811      	ldrb	r1, [r2, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	0010      	movs	r0, r2
 8001608:	4798      	blx	r3
					}
					USBdev_SendStatusOK(usbd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	0018      	movs	r0, r3
 800160e:	f000 f937 	bl	8001880 <USBdev_SendStatusOK>
					break;
 8001612:	e009      	b.n	8001628 <USBclass_HandleRequest+0x208>
					
				case CDCRQ_SEND_BREAK:	// supported if bmCapabilities bit 2 set
					USBdev_SendStatusOK(usbd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	0018      	movs	r0, r3
 8001618:	f000 f932 	bl	8001880 <USBdev_SendStatusOK>
					break;
 800161c:	e004      	b.n	8001628 <USBclass_HandleRequest+0x208>

				case CDCRQ_SEND_ENCAPSULATED_COMMAND:	// required by CDC120, not used by Windows VCOM
				case CDCRQ_GET_ENCAPSULATED_RESPONSE:	// required by CDC120, not used by Windows VCOM
				default:
					USBdev_CtrlError(usbd);// should stall on unhandled requests
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0018      	movs	r0, r3
 8001622:	f000 f93b 	bl	800189c <USBdev_CtrlError>
				}
				break;	// USB_CLASS_COMMUNICATIONS
 8001626:	e079      	b.n	800171c <USBclass_HandleRequest+0x2fc>
 8001628:	e078      	b.n	800171c <USBclass_HandleRequest+0x2fc>
#endif // USBD_CDC_CHANNELS

#if USBD_HID
			case USB_CLASS_HID:	// only single report in+out supported - enough for kb, mouse etc.
				switch (req->bRequest)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	2b0b      	cmp	r3, #11
 8001630:	d864      	bhi.n	80016fc <USBclass_HandleRequest+0x2dc>
 8001632:	009a      	lsls	r2, r3, #2
 8001634:	4b3e      	ldr	r3, [pc, #248]	@ (8001730 <USBclass_HandleRequest+0x310>)
 8001636:	18d3      	adds	r3, r2, r3
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	469f      	mov	pc, r3
				{
				case HIDRQ_GET_REPORT:
					USBdev_SendStatus(usbd,
						req->wValue.b.h == HID_REPORTTYPE_OUT // output report (report id in .l - assume 0)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	78db      	ldrb	r3, [r3, #3]
					USBdev_SendStatus(usbd,
 8001640:	2b02      	cmp	r3, #2
 8001642:	d104      	bne.n	800164e <USBclass_HandleRequest+0x22e>
							? (const uint8_t *)&usbd->hid_data->OutReport
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
					USBdev_SendStatus(usbd,
 8001648:	330e      	adds	r3, #14
 800164a:	0019      	movs	r1, r3
 800164c:	e002      	b.n	8001654 <USBclass_HandleRequest+0x234>
							: (const uint8_t *)&usbd->hid_data->InReport,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
					USBdev_SendStatus(usbd,
 8001652:	1d99      	adds	r1, r3, #6
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	88da      	ldrh	r2, [r3, #6]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	2300      	movs	r3, #0
 800165c:	f000 f8f2 	bl	8001844 <USBdev_SendStatus>
						req->wLength, 0);
					break;
 8001660:	e051      	b.n	8001706 <USBclass_HandleRequest+0x2e6>

				case HIDRQ_GET_IDLE:
					USBdev_SendStatus(usbd, (const uint8_t *)&usbd->hid_data->Idle, 1, 0);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001666:	1cd9      	adds	r1, r3, #3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	2300      	movs	r3, #0
 800166c:	2201      	movs	r2, #1
 800166e:	f000 f8e9 	bl	8001844 <USBdev_SendStatus>
					break;
 8001672:	e048      	b.n	8001706 <USBclass_HandleRequest+0x2e6>

				case HIDRQ_GET_PROTOCOL:
					USBdev_SendStatus(usbd, (const uint8_t *)&usbd->hid_data->Protocol, 1, 0);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001678:	1d19      	adds	r1, r3, #4
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	2300      	movs	r3, #0
 800167e:	2201      	movs	r2, #1
 8001680:	f000 f8e0 	bl	8001844 <USBdev_SendStatus>
					break;
 8001684:	e03f      	b.n	8001706 <USBclass_HandleRequest+0x2e6>

				case HIDRQ_SET_REPORT:
					if (req->wValue.b.h == HID_REPORTTYPE_OUT)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	78db      	ldrb	r3, [r3, #3]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d11d      	bne.n	80016ca <USBclass_HandleRequest+0x2aa>
					{
						memcpy(usbd->hid_data->OutReport, usbd->outep[0].ptr, MIN(req->wLength, HID_OUT_REPORT_SIZE));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001692:	330e      	adds	r3, #14
 8001694:	0018      	movs	r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	88db      	ldrh	r3, [r3, #6]
 80016a0:	1c1a      	adds	r2, r3, #0
 80016a2:	b293      	uxth	r3, r2
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d901      	bls.n	80016ac <USBclass_HandleRequest+0x28c>
 80016a8:	2308      	movs	r3, #8
 80016aa:	1c1a      	adds	r2, r3, #0
 80016ac:	b293      	uxth	r3, r2
 80016ae:	001a      	movs	r2, r3
 80016b0:	f001 fa86 	bl	8002bc0 <memcpy>
						if (usbd->hid_service->UpdateOut)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <USBclass_HandleRequest+0x2aa>
							usbd->hid_service->UpdateOut(usbd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	0010      	movs	r0, r2
 80016c8:	4798      	blx	r3
					}
					USBdev_SendStatusOK(usbd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 f8d7 	bl	8001880 <USBdev_SendStatusOK>
					break;
 80016d2:	e018      	b.n	8001706 <USBclass_HandleRequest+0x2e6>

				case HIDRQ_SET_IDLE:
					usbd->hid_data->Idle = req->wValue.b.h;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	78d2      	ldrb	r2, [r2, #3]
 80016dc:	70da      	strb	r2, [r3, #3]
					USBdev_SendStatusOK(usbd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 f8cd 	bl	8001880 <USBdev_SendStatusOK>
					break;
 80016e6:	e00e      	b.n	8001706 <USBclass_HandleRequest+0x2e6>

				case HIDRQ_SET_PROTOCOL:
					usbd->hid_data->Protocol = req->wValue.b.l;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	7892      	ldrb	r2, [r2, #2]
 80016f0:	711a      	strb	r2, [r3, #4]
					USBdev_SendStatusOK(usbd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 f8c3 	bl	8001880 <USBdev_SendStatusOK>
					break;
 80016fa:	e004      	b.n	8001706 <USBclass_HandleRequest+0x2e6>

				default:
					USBdev_CtrlError(usbd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	0018      	movs	r0, r3
 8001700:	f000 f8cc 	bl	800189c <USBdev_CtrlError>
				}
				break;
 8001704:	e00a      	b.n	800171c <USBclass_HandleRequest+0x2fc>
 8001706:	e009      	b.n	800171c <USBclass_HandleRequest+0x2fc>
					USBdev_CtrlError(usbd);
				}
				break;
#endif
			default:
				USBdev_CtrlError(usbd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	0018      	movs	r0, r3
 800170c:	f000 f8c6 	bl	800189c <USBdev_CtrlError>
			}
		}
		else
			USBdev_CtrlError(usbd);
		break;	//USB_RQREC_INTERFACE
 8001710:	e00a      	b.n	8001728 <USBclass_HandleRequest+0x308>
			USBdev_CtrlError(usbd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f8c1 	bl	800189c <USBdev_CtrlError>
		break;	//USB_RQREC_INTERFACE
 800171a:	e005      	b.n	8001728 <USBclass_HandleRequest+0x308>
 800171c:	e004      	b.n	8001728 <USBclass_HandleRequest+0x308>
	default:
		USBdev_CtrlError(usbd);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0018      	movs	r0, r3
 8001722:	f000 f8bb 	bl	800189c <USBdev_CtrlError>
	}
}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	46c0      	nop			@ (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b006      	add	sp, #24
 800172e:	bd80      	pop	{r7, pc}
 8001730:	08002e70 	.word	0x08002e70

08001734 <getusb16>:
typedef struct usb16_ {
	uint8_t lo, hi;
} usb16;

static inline uint16_t getusb16(const struct usb16_ *p)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	return p->lo | p->hi << 8;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b21b      	sxth	r3, r3
 800174e:	b29b      	uxth	r3, r3
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}

08001758 <USBdev_SendData>:
	if (epn < usbd->cfg->numeppairs)
		usbd->outep[epn].ptr = buf;
}

bool USBdev_SendData(const struct usbdevice_ *usbd, uint8_t epn, const uint8_t *data, uint16_t length, bool autozlp)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	0008      	movs	r0, r1
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	0019      	movs	r1, r3
 8001766:	240b      	movs	r4, #11
 8001768:	193b      	adds	r3, r7, r4
 800176a:	1c02      	adds	r2, r0, #0
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	2308      	movs	r3, #8
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	1c0a      	adds	r2, r1, #0
 8001774:	801a      	strh	r2, [r3, #0]
	epn &= EPNUMMSK;
 8001776:	0020      	movs	r0, r4
 8001778:	183b      	adds	r3, r7, r0
 800177a:	183a      	adds	r2, r7, r0
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	2107      	movs	r1, #7
 8001780:	400a      	ands	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
	struct epdata_ *epd = &usbd->inep[epn];
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	0001      	movs	r1, r0
 800178a:	187b      	adds	r3, r7, r1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	18d3      	adds	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
	if (epd->busy || (epn && usbd->devdata->devstate != USBD_STATE_CONFIGURED))
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	79db      	ldrb	r3, [r3, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d108      	bne.n	80017ae <USBdev_SendData+0x56>
 800179c:	187b      	adds	r3, r7, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <USBdev_SendData+0x5a>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d001      	beq.n	80017b2 <USBdev_SendData+0x5a>
		return 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e044      	b.n	800183c <USBdev_SendData+0xe4>

	if (!data)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <USBdev_SendData+0x68>
		length = 0;	// send ZLP if nullptr passed
 80017b8:	2308      	movs	r3, #8
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	2200      	movs	r2, #0
 80017be:	801a      	strh	r2, [r3, #0]
	epd->busy = 1;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2201      	movs	r2, #1
 80017c4:	71da      	strb	r2, [r3, #7]
	epd->count = length;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2408      	movs	r4, #8
 80017ca:	193a      	adds	r2, r7, r4
 80017cc:	8812      	ldrh	r2, [r2, #0]
 80017ce:	809a      	strh	r2, [r3, #4]
	epd->ptr = (uint8_t *)data;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
	epd->sendzlp = autozlp && length && length % usbd->hwif->GetInEPSize(usbd, epn) == 0;
 80017d6:	2320      	movs	r3, #32
 80017d8:	2208      	movs	r2, #8
 80017da:	189b      	adds	r3, r3, r2
 80017dc:	19db      	adds	r3, r3, r7
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01a      	beq.n	800181a <USBdev_SendData+0xc2>
 80017e4:	193b      	adds	r3, r7, r4
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d016      	beq.n	800181a <USBdev_SendData+0xc2>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	220b      	movs	r2, #11
 80017f4:	18ba      	adds	r2, r7, r2
 80017f6:	7811      	ldrb	r1, [r2, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	0010      	movs	r0, r2
 80017fc:	4798      	blx	r3
 80017fe:	0003      	movs	r3, r0
 8001800:	001a      	movs	r2, r3
 8001802:	193b      	adds	r3, r7, r4
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f7fe fd0b 	bl	8000224 <__aeabi_uidivmod>
 800180e:	000b      	movs	r3, r1
 8001810:	b29b      	uxth	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <USBdev_SendData+0xc2>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <USBdev_SendData+0xc4>
 800181a:	2300      	movs	r3, #0
 800181c:	1c1a      	adds	r2, r3, #0
 800181e:	2301      	movs	r3, #1
 8001820:	4013      	ands	r3, r2
 8001822:	b2da      	uxtb	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	719a      	strb	r2, [r3, #6]
	usbd->hwif->StartTx(usbd, epn);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	220b      	movs	r2, #11
 8001830:	18ba      	adds	r2, r7, r2
 8001832:	7811      	ldrb	r1, [r2, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	0010      	movs	r0, r2
 8001838:	4798      	blx	r3
	return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b007      	add	sp, #28
 8001842:	bd90      	pop	{r4, r7, pc}

08001844 <USBdev_SendStatus>:

void USBdev_SendStatus(const struct usbdevice_ *usbd, const uint8_t *data, uint16_t length, bool zlp)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	0019      	movs	r1, r3
 8001850:	1dbb      	adds	r3, r7, #6
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	1d7b      	adds	r3, r7, #5
 8001856:	1c0a      	adds	r2, r1, #0
 8001858:	701a      	strb	r2, [r3, #0]
	usbd->devdata->ep0state = USBD_EP0_STATUS_IN;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2204      	movs	r2, #4
 8001860:	70da      	strb	r2, [r3, #3]
	USBdev_SendData(usbd, 0, data, length, zlp);
 8001862:	1dbb      	adds	r3, r7, #6
 8001864:	8819      	ldrh	r1, [r3, #0]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	1d7b      	adds	r3, r7, #5
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	000b      	movs	r3, r1
 8001872:	2100      	movs	r1, #0
 8001874:	f7ff ff70 	bl	8001758 <USBdev_SendData>
	USBlog_storeresp(RSP_STATUS, length);
}
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b004      	add	sp, #16
 800187e:	bd80      	pop	{r7, pc}

08001880 <USBdev_SendStatusOK>:

void USBdev_SendStatusOK(const struct usbdevice_ *usbd)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	USBdev_SendStatus(usbd, 0, 0, 0);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	2300      	movs	r3, #0
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	f7ff ffd8 	bl	8001844 <USBdev_SendStatus>
}
 8001894:	46c0      	nop			@ (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}

0800189c <USBdev_CtrlError>:

void USBdev_CtrlError(const struct usbdevice_ *usbd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	// stall both control endpoints
	usbd->devdata->ep0state = USBD_EP0_STALL;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2206      	movs	r2, #6
 80018aa:	70da      	strb	r2, [r3, #3]
	usbd->hwif->SetEPStall(usbd, EP_IS_IN | 0);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	0010      	movs	r0, r2
 80018b8:	4798      	blx	r3
	usbd->hwif->SetEPStall(usbd, 0);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	2100      	movs	r1, #0
 80018c4:	0010      	movs	r0, r2
 80018c6:	4798      	blx	r3
	USBlog_storeresp(RSP_ERR, 0);
}
 80018c8:	46c0      	nop			@ (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <USBdev_GetDescriptor>:

static void USBdev_GetDescriptor(const struct usbdevice_ *usbd)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	const uint8_t *ptr = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
	uint16_t size = 0;
 80018dc:	2312      	movs	r3, #18
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2200      	movs	r2, #0
 80018e2:	801a      	strh	r2, [r3, #0]
	USB_SetupPacket *req = &usbd->devdata->req;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	3306      	adds	r3, #6
 80018ea:	60fb      	str	r3, [r7, #12]
	
	switch (req->wValue.b.h)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	78db      	ldrb	r3, [r3, #3]
 80018f0:	2b22      	cmp	r3, #34	@ 0x22
 80018f2:	d04e      	beq.n	8001992 <USBdev_GetDescriptor+0xc2>
 80018f4:	dd00      	ble.n	80018f8 <USBdev_GetDescriptor+0x28>
 80018f6:	e06c      	b.n	80019d2 <USBdev_GetDescriptor+0x102>
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d039      	beq.n	8001970 <USBdev_GetDescriptor+0xa0>
 80018fc:	dd00      	ble.n	8001900 <USBdev_GetDescriptor+0x30>
 80018fe:	e068      	b.n	80019d2 <USBdev_GetDescriptor+0x102>
 8001900:	2b01      	cmp	r3, #1
 8001902:	d002      	beq.n	800190a <USBdev_GetDescriptor+0x3a>
 8001904:	2b02      	cmp	r3, #2
 8001906:	d020      	beq.n	800194a <USBdev_GetDescriptor+0x7a>
		}
		break;
#endif

	default:
		break;
 8001908:	e063      	b.n	80019d2 <USBdev_GetDescriptor+0x102>
		ptr = (const uint8_t *)usbd->cfg->devdesc;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	617b      	str	r3, [r7, #20]
		if (req->wLength > *ptr)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	88db      	ldrh	r3, [r3, #6]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	4293      	cmp	r3, r2
 800191c:	d95b      	bls.n	80019d6 <USBdev_GetDescriptor+0x106>
			size = MIN(*ptr, usbd->cfg->devdesc->bMaxPacketSize0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	79da      	ldrb	r2, [r3, #7]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	1c18      	adds	r0, r3, #0
 800192c:	1c11      	adds	r1, r2, #0
 800192e:	b2ca      	uxtb	r2, r1
 8001930:	b2c3      	uxtb	r3, r0
 8001932:	429a      	cmp	r2, r3
 8001934:	d900      	bls.n	8001938 <USBdev_GetDescriptor+0x68>
 8001936:	1c01      	adds	r1, r0, #0
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	2112      	movs	r1, #18
 800193c:	187b      	adds	r3, r7, r1
 800193e:	801a      	strh	r2, [r3, #0]
			req->wLength = size;	// adjust to suppress automatic ZLP
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	187a      	adds	r2, r7, r1
 8001944:	8812      	ldrh	r2, [r2, #0]
 8001946:	80da      	strh	r2, [r3, #6]
		break;
 8001948:	e045      	b.n	80019d6 <USBdev_GetDescriptor+0x106>
		ptr = (const uint8_t *)usbd->cfg->cfgdesc;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	617b      	str	r3, [r7, #20]
		size = ptr[2] | ptr[3] << 8;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3302      	adds	r3, #2
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b21a      	sxth	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3303      	adds	r3, #3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b21b      	sxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b21a      	sxth	r2, r3
 8001968:	2312      	movs	r3, #18
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	801a      	strh	r2, [r3, #0]
		break;
 800196e:	e037      	b.n	80019e0 <USBdev_GetDescriptor+0x110>
		if (req->wValue.b.l < usbd->cfg->nstringdesc)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	789a      	ldrb	r2, [r3, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	78db      	ldrb	r3, [r3, #3]
 800197a:	429a      	cmp	r2, r3
 800197c:	d22d      	bcs.n	80019da <USBdev_GetDescriptor+0x10a>
			ptr = usbd->cfg->strdesc[req->wValue.b.l];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	789b      	ldrb	r3, [r3, #2]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	18d3      	adds	r3, r2, r3
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	617b      	str	r3, [r7, #20]
		break;
 8001990:	e023      	b.n	80019da <USBdev_GetDescriptor+0x10a>
		if (req->bmRequestType.Recipient == USB_RQREC_INTERFACE
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	221f      	movs	r2, #31
 8001998:	4013      	ands	r3, r2
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d11e      	bne.n	80019de <USBdev_GetDescriptor+0x10e>
				&& req->wIndex.w == IFNUM_HID)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	889b      	ldrh	r3, [r3, #4]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d11a      	bne.n	80019de <USBdev_GetDescriptor+0x10e>
			ptr = usbd->cfg->hidrepdesc;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	617b      	str	r3, [r7, #20]
			size = MIN(req->wLength, usbd->cfg->hidrepdescsize);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	7f1b      	ldrb	r3, [r3, #28]
 80019b6:	0019      	movs	r1, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	88db      	ldrh	r3, [r3, #6]
 80019bc:	2212      	movs	r2, #18
 80019be:	18ba      	adds	r2, r7, r2
 80019c0:	1c1c      	adds	r4, r3, #0
 80019c2:	1c0b      	adds	r3, r1, #0
 80019c4:	b298      	uxth	r0, r3
 80019c6:	b2a1      	uxth	r1, r4
 80019c8:	4288      	cmp	r0, r1
 80019ca:	d900      	bls.n	80019ce <USBdev_GetDescriptor+0xfe>
 80019cc:	1c23      	adds	r3, r4, #0
 80019ce:	8013      	strh	r3, [r2, #0]
		break;
 80019d0:	e005      	b.n	80019de <USBdev_GetDescriptor+0x10e>
		break;
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	e004      	b.n	80019e0 <USBdev_GetDescriptor+0x110>
		break;
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	e002      	b.n	80019e0 <USBdev_GetDescriptor+0x110>
		break;
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	e000      	b.n	80019e0 <USBdev_GetDescriptor+0x110>
		break;
 80019de:	46c0      	nop			@ (mov r8, r8)
	}
	if (ptr)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d023      	beq.n	8001a2e <USBdev_GetDescriptor+0x15e>
	{
		if (size == 0)
 80019e6:	2112      	movs	r1, #18
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <USBdev_GetDescriptor+0x128>
			size = *ptr;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	801a      	strh	r2, [r3, #0]
		USBdev_SendStatus(usbd, ptr, MIN(size, req->wLength), size < req->wLength);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	88da      	ldrh	r2, [r3, #6]
 80019fc:	2312      	movs	r3, #18
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	1c10      	adds	r0, r2, #0
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b299      	uxth	r1, r3
 8001a06:	b282      	uxth	r2, r0
 8001a08:	4291      	cmp	r1, r2
 8001a0a:	d900      	bls.n	8001a0e <USBdev_GetDescriptor+0x13e>
 8001a0c:	1c03      	adds	r3, r0, #0
 8001a0e:	b29c      	uxth	r4, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	88db      	ldrh	r3, [r3, #6]
 8001a14:	2212      	movs	r2, #18
 8001a16:	18ba      	adds	r2, r7, r2
 8001a18:	8812      	ldrh	r2, [r2, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	419b      	sbcs	r3, r3
 8001a1e:	425b      	negs	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	6979      	ldr	r1, [r7, #20]
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	0022      	movs	r2, r4
 8001a28:	f7ff ff0c 	bl	8001844 <USBdev_SendStatus>
	}
	else
		USBdev_CtrlError(usbd);
}
 8001a2c:	e003      	b.n	8001a36 <USBdev_GetDescriptor+0x166>
		USBdev_CtrlError(usbd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff ff33 	bl	800189c <USBdev_CtrlError>
}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b007      	add	sp, #28
 8001a3c:	bd90      	pop	{r4, r7, pc}
	...

08001a40 <USBdev_HandleRequest>:

// Moved to usb_class.c 
void USBclass_HandleRequest(const struct usbdevice_ *usbd);

static void USBdev_HandleRequest(const struct usbdevice_ *usbd)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	USB_SetupPacket *req = &usbd->devdata->req;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	3306      	adds	r3, #6
 8001a4e:	617b      	str	r3, [r7, #20]
	
	switch (req->bmRequestType.Type)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	065b      	lsls	r3, r3, #25
 8001a56:	0f9b      	lsrs	r3, r3, #30
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <USBdev_HandleRequest+0x26>
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d100      	bne.n	8001a64 <USBdev_HandleRequest+0x24>
 8001a62:	e0f2      	b.n	8001c4a <USBdev_HandleRequest+0x20a>
 8001a64:	e0f6      	b.n	8001c54 <USBdev_HandleRequest+0x214>
	{
	case USB_RQTYPE_STANDARD:
		switch (req->bRequest)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	2b09      	cmp	r3, #9
 8001a6c:	d900      	bls.n	8001a70 <USBdev_HandleRequest+0x30>
 8001a6e:	e0e6      	b.n	8001c3e <USBdev_HandleRequest+0x1fe>
 8001a70:	009a      	lsls	r2, r3, #2
 8001a72:	4b7d      	ldr	r3, [pc, #500]	@ (8001c68 <USBdev_HandleRequest+0x228>)
 8001a74:	18d3      	adds	r3, r2, r3
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	469f      	mov	pc, r3
		{
		case USB_STDRQ_SET_ADDRESS:
			usbd->devdata->setaddress = req->wValue.b.l;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	7892      	ldrb	r2, [r2, #2]
 8001a82:	709a      	strb	r2, [r3, #2]
			USBdev_SendStatusOK(usbd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff fefa 	bl	8001880 <USBdev_SendStatusOK>
			break;
 8001a8c:	e0dc      	b.n	8001c48 <USBdev_HandleRequest+0x208>

		case USB_STDRQ_GET_DESCRIPTOR:
			USBdev_GetDescriptor(usbd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff ff1d 	bl	80018d0 <USBdev_GetDescriptor>
			break;
 8001a96:	e0d7      	b.n	8001c48 <USBdev_HandleRequest+0x208>

		case USB_STDRQ_GET_STATUS:
			switch (req->bmRequestType.Recipient)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	06db      	lsls	r3, r3, #27
 8001a9e:	0edb      	lsrs	r3, r3, #27
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d015      	beq.n	8001ad2 <USBdev_HandleRequest+0x92>
 8001aa6:	dc27      	bgt.n	8001af8 <USBdev_HandleRequest+0xb8>
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <USBdev_HandleRequest+0x72>
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d009      	beq.n	8001ac4 <USBdev_HandleRequest+0x84>
 8001ab0:	e022      	b.n	8001af8 <USBdev_HandleRequest+0xb8>
			{
				static const uint8_t zero[2];
				static uint16_t epstatus;
			case USB_RQREC_DEVICE:	// TODO: should return RWKUP and self-powered status
				USBdev_SendStatus(usbd, (const uint8_t *)&usbd->devdata->status, 2, 0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	1d19      	adds	r1, r3, #4
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	2300      	movs	r3, #0
 8001abc:	2202      	movs	r2, #2
 8001abe:	f7ff fec1 	bl	8001844 <USBdev_SendStatus>
				break;
 8001ac2:	e01e      	b.n	8001b02 <USBdev_HandleRequest+0xc2>
			case USB_RQREC_INTERFACE:
				USBdev_SendStatus(usbd, zero, 2, 0);
 8001ac4:	4969      	ldr	r1, [pc, #420]	@ (8001c6c <USBdev_HandleRequest+0x22c>)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2202      	movs	r2, #2
 8001acc:	f7ff feba 	bl	8001844 <USBdev_SendStatus>
				break;
 8001ad0:	e017      	b.n	8001b02 <USBdev_HandleRequest+0xc2>
			case USB_RQREC_ENDPOINT:
				epstatus = usbd->hwif->IsEPStalled(usbd, req->wIndex.b.l);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	7911      	ldrb	r1, [r2, #4]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	0010      	movs	r0, r2
 8001ae0:	4798      	blx	r3
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	4b62      	ldr	r3, [pc, #392]	@ (8001c70 <USBdev_HandleRequest+0x230>)
 8001ae8:	801a      	strh	r2, [r3, #0]
				USBdev_SendStatus(usbd, (const uint8_t *)&epstatus, 2, 0);
 8001aea:	4961      	ldr	r1, [pc, #388]	@ (8001c70 <USBdev_HandleRequest+0x230>)
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	2300      	movs	r3, #0
 8001af0:	2202      	movs	r2, #2
 8001af2:	f7ff fea7 	bl	8001844 <USBdev_SendStatus>
				break;
 8001af6:	e004      	b.n	8001b02 <USBdev_HandleRequest+0xc2>
			default:
				USBdev_CtrlError(usbd);	// stall on unhandled requests
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff fece 	bl	800189c <USBdev_CtrlError>
			}
			break;
 8001b00:	e0a2      	b.n	8001c48 <USBdev_HandleRequest+0x208>
 8001b02:	e0a1      	b.n	8001c48 <USBdev_HandleRequest+0x208>

		case USB_STDRQ_GET_CONFIGURATION:
			USBdev_SendStatus(usbd, &usbd->devdata->configuration, 1, 0);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f7ff fe98 	bl	8001844 <USBdev_SendStatus>
			break;
 8001b14:	e098      	b.n	8001c48 <USBdev_HandleRequest+0x208>

		case USB_STDRQ_SET_CONFIGURATION:
			switch (req->wValue.w)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	885b      	ldrh	r3, [r3, #2]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <USBdev_HandleRequest+0xe4>
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d013      	beq.n	8001b4a <USBdev_HandleRequest+0x10a>
 8001b22:	e025      	b.n	8001b70 <USBdev_HandleRequest+0x130>
			{
			case 0:	// deconfig
				usbd->devdata->configuration = 0;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	705a      	strb	r2, [r3, #1]
				usbd->hwif->ResetCfg(usbd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	0010      	movs	r0, r2
 8001b36:	4798      	blx	r3
				USBdev_SendStatusOK(usbd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7ff fea0 	bl	8001880 <USBdev_SendStatusOK>
				usbd->devdata->devstate = USBD_STATE_ADDRESSED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
				break;
 8001b48:	e017      	b.n	8001b7a <USBdev_HandleRequest+0x13a>
			case 1:	// config
				usbd->devdata->configuration = 1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	705a      	strb	r2, [r3, #1]
				usbd->hwif->SetCfg(usbd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	4798      	blx	r3
				USBdev_SendStatusOK(usbd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff fe8d 	bl	8001880 <USBdev_SendStatusOK>
				usbd->devdata->devstate = USBD_STATE_CONFIGURED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]
				break;
 8001b6e:	e004      	b.n	8001b7a <USBdev_HandleRequest+0x13a>
			default:
				USBdev_CtrlError(usbd);	// stall on unhandled requests
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7ff fe92 	bl	800189c <USBdev_CtrlError>
			}
			break;
 8001b78:	e066      	b.n	8001c48 <USBdev_HandleRequest+0x208>
 8001b7a:	e065      	b.n	8001c48 <USBdev_HandleRequest+0x208>

		case USB_STDRQ_CLEAR_FEATURE:
			if (req->bmRequestType.Recipient == USB_RQREC_ENDPOINT && req->wValue.b.l == USB_FEATSEL_ENDPOINT_HALT)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	221f      	movs	r2, #31
 8001b82:	4013      	ands	r3, r2
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d137      	bne.n	8001bfa <USBdev_HandleRequest+0x1ba>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	789b      	ldrb	r3, [r3, #2]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d133      	bne.n	8001bfa <USBdev_HandleRequest+0x1ba>
			{
				uint8_t epaddr = req->wIndex.b.l;
 8001b92:	2113      	movs	r1, #19
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	7912      	ldrb	r2, [r2, #4]
 8001b9a:	701a      	strb	r2, [r3, #0]
				if ((epaddr & EP_IS_IN) && (epaddr & EPNUMMSK) < USBD_NUM_EPPAIRS)
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da13      	bge.n	8001bce <USBdev_HandleRequest+0x18e>
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2207      	movs	r2, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d80d      	bhi.n	8001bce <USBdev_HandleRequest+0x18e>
				{
					usbd->inep[epaddr & EPNUMMSK] = (struct epdata_){0, 0, 0, 0};
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2107      	movs	r1, #7
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	2100      	movs	r1, #0
 8001bca:	f000 ffcd 	bl	8002b68 <memset>
				}
				USBclass_ClearEPStall(usbd, epaddr);
 8001bce:	2413      	movs	r4, #19
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fbe7 	bl	80013ac <USBclass_ClearEPStall>
				usbd->hwif->ClrEPStall(usbd, epaddr);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	193a      	adds	r2, r7, r4
 8001be6:	7811      	ldrb	r1, [r2, #0]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	0010      	movs	r0, r2
 8001bec:	4798      	blx	r3
				USBdev_SendStatusOK(usbd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff fe45 	bl	8001880 <USBdev_SendStatusOK>
			{
 8001bf6:	46c0      	nop			@ (mov r8, r8)
			}
			else
				USBdev_CtrlError(usbd);	// stall on unhandled requests
			break;
 8001bf8:	e026      	b.n	8001c48 <USBdev_HandleRequest+0x208>
				USBdev_CtrlError(usbd);	// stall on unhandled requests
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fe4d 	bl	800189c <USBdev_CtrlError>
			break;
 8001c02:	e021      	b.n	8001c48 <USBdev_HandleRequest+0x208>
		case USB_STDRQ_SET_FEATURE:
			if (req->bmRequestType.Recipient == USB_RQREC_ENDPOINT && req->wValue.b.l == USB_FEATSEL_ENDPOINT_HALT)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	221f      	movs	r2, #31
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d110      	bne.n	8001c34 <USBdev_HandleRequest+0x1f4>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	789b      	ldrb	r3, [r3, #2]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <USBdev_HandleRequest+0x1f4>
			{
				usbd->hwif->SetEPStall(usbd, req->wIndex.b.l);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	7911      	ldrb	r1, [r2, #4]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	0010      	movs	r0, r2
 8001c28:	4798      	blx	r3
				USBdev_SendStatusOK(usbd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff fe27 	bl	8001880 <USBdev_SendStatusOK>
			}
			else
				USBdev_CtrlError(usbd);	// stall on unhandled requests
			break;
 8001c32:	e009      	b.n	8001c48 <USBdev_HandleRequest+0x208>
				USBdev_CtrlError(usbd);	// stall on unhandled requests
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff fe30 	bl	800189c <USBdev_CtrlError>
			break;
 8001c3c:	e004      	b.n	8001c48 <USBdev_HandleRequest+0x208>
		default:
			USBdev_CtrlError(usbd);	// stall on unhandled requests
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff fe2b 	bl	800189c <USBdev_CtrlError>
		}
		break;
 8001c46:	e00a      	b.n	8001c5e <USBdev_HandleRequest+0x21e>
 8001c48:	e009      	b.n	8001c5e <USBdev_HandleRequest+0x21e>
	
	case USB_RQTYPE_CLASS:
		USBclass_HandleRequest(usbd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff fbe7 	bl	8001420 <USBclass_HandleRequest>
		break;
 8001c52:	e004      	b.n	8001c5e <USBdev_HandleRequest+0x21e>
	default:
		USBdev_CtrlError(usbd);// should stall on unhandled requests
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff fe20 	bl	800189c <USBdev_CtrlError>
	}
}
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b007      	add	sp, #28
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	08002ea0 	.word	0x08002ea0
 8001c6c:	08002ec8 	.word	0x08002ec8
 8001c70:	20000242 	.word	0x20000242

08001c74 <USBdev_InEPHandler>:

// data sent on In endpoint
void USBdev_InEPHandler(const struct usbdevice_ *usbd, uint8_t epn)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	000a      	movs	r2, r1
 8001c7e:	1cfb      	adds	r3, r7, #3
 8001c80:	701a      	strb	r2, [r3, #0]
	struct epdata_ *epd = &usbd->inep[epn];
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	1cfb      	adds	r3, r7, #3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	60fb      	str	r3, [r7, #12]
	
	// In transfer completed
	epd->ptr = 0;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
	epd->busy = 0;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	71da      	strb	r2, [r3, #7]
	if (epn)	// application ep
 8001c9c:	1cfb      	adds	r3, r7, #3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01b      	beq.n	8001cdc <USBdev_InEPHandler+0x68>
	{
		if (usbd->cfg->inepcfg[epn].handler)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	1cfb      	adds	r3, r7, #3
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	18d3      	adds	r3, r2, r3
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01e      	beq.n	8001cf6 <USBdev_InEPHandler+0x82>
			usbd->cfg->inepcfg[epn].handler(usbd, epn | EP_IS_IN);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	1cfb      	adds	r3, r7, #3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	18d3      	adds	r3, r2, r3
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	1cfa      	adds	r2, r7, #3
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	4249      	negs	r1, r1
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	b2d1      	uxtb	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	4798      	blx	r3
			usbd->devdata->devstate = USBD_STATE_ADDRESSED;
		}

		USBlog_recordevt(0x80);
	}
}
 8001cda:	e00c      	b.n	8001cf6 <USBdev_InEPHandler+0x82>
		if (usbd->devdata->setaddress)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	789b      	ldrb	r3, [r3, #2]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <USBdev_InEPHandler+0x82>
			usbd->devdata->setaddress = 0;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	709a      	strb	r2, [r3, #2]
			usbd->devdata->devstate = USBD_STATE_ADDRESSED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b004      	add	sp, #16
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <USBdev_OutEPHandler>:

// data received on Out endpoint
void USBdev_OutEPHandler(const struct usbdevice_ *usbd, uint8_t epn, bool setup)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	0008      	movs	r0, r1
 8001d08:	0011      	movs	r1, r2
 8001d0a:	1cfb      	adds	r3, r7, #3
 8001d0c:	1c02      	adds	r2, r0, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	1cbb      	adds	r3, r7, #2
 8001d12:	1c0a      	adds	r2, r1, #0
 8001d14:	701a      	strb	r2, [r3, #0]
	if (epn == 0)	// control endpoint
 8001d16:	1cfb      	adds	r3, r7, #3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d14f      	bne.n	8001dbe <USBdev_OutEPHandler+0xc0>
	{
		if (usbd->outep[0].count)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d040      	beq.n	8001daa <USBdev_OutEPHandler+0xac>
		{
			if (setup)
 8001d28:	1cbb      	adds	r3, r7, #2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d02d      	beq.n	8001d8c <USBdev_OutEPHandler+0x8e>
			{
				// setup packet received - copy to setup packet buffer
				USB_SetupPacket *req = &usbd->devdata->req;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	3306      	adds	r3, #6
 8001d36:	60fb      	str	r3, [r7, #12]
				*req = *(USB_SetupPacket *)usbd->outep[0].ptr;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	0010      	movs	r0, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	2308      	movs	r3, #8
 8001d46:	001a      	movs	r2, r3
 8001d48:	f000 ff3a 	bl	8002bc0 <memcpy>
				USBlog_storerq(req);
				if (req->bmRequestType.DirIn || req->wLength == 0)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	227f      	movs	r2, #127	@ 0x7f
 8001d52:	4393      	bics	r3, r2
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <USBdev_OutEPHandler+0x64>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	88db      	ldrh	r3, [r3, #6]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d108      	bne.n	8001d74 <USBdev_OutEPHandler+0x76>
				{
					usbd->devdata->ep0state = USBD_EP0_SETUP;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	70da      	strb	r2, [r3, #3]
					// ok for F0, L0, wrong for F4
					//usbd->hwif->SetEPStall(usbd, 0);	// disable ep 0 data out
					USBdev_HandleRequest(usbd);	// handle in request or no-data out request
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fe67 	bl	8001a40 <USBdev_HandleRequest>
	else // data received on application endpoint
	{
		if (epn < usbd->cfg->numeppairs && usbd->cfg->outepcfg[epn].handler)
			usbd->cfg->outepcfg[epn].handler(usbd, epn);
	}
}
 8001d72:	e046      	b.n	8001e02 <USBdev_OutEPHandler+0x104>
					usbd->devdata->ep0state = USBD_EP0_DATA_OUT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	70da      	strb	r2, [r3, #3]
					usbd->hwif->EnableRx(usbd, 0);	// prepare for data out
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	2100      	movs	r1, #0
 8001d86:	0010      	movs	r0, r2
 8001d88:	4798      	blx	r3
}
 8001d8a:	e03a      	b.n	8001e02 <USBdev_OutEPHandler+0x104>
				if (usbd->devdata->ep0state == USBD_EP0_DATA_OUT)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	78db      	ldrb	r3, [r3, #3]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d104      	bne.n	8001da0 <USBdev_OutEPHandler+0xa2>
					USBdev_HandleRequest(usbd);	// data received
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff fe51 	bl	8001a40 <USBdev_HandleRequest>
}
 8001d9e:	e030      	b.n	8001e02 <USBdev_OutEPHandler+0x104>
					usbd->devdata->ep0state = USBD_EP0_IDLE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	70da      	strb	r2, [r3, #3]
}
 8001da8:	e02b      	b.n	8001e02 <USBdev_OutEPHandler+0x104>
			if (usbd->devdata->ep0state == USBD_EP0_STATUS_OUT)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	78db      	ldrb	r3, [r3, #3]
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d126      	bne.n	8001e02 <USBdev_OutEPHandler+0x104>
				usbd->devdata->ep0state = USBD_EP0_IDLE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	70da      	strb	r2, [r3, #3]
}
 8001dbc:	e021      	b.n	8001e02 <USBdev_OutEPHandler+0x104>
		if (epn < usbd->cfg->numeppairs && usbd->cfg->outepcfg[epn].handler)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	789b      	ldrb	r3, [r3, #2]
 8001dc4:	06db      	lsls	r3, r3, #27
 8001dc6:	0edb      	lsrs	r3, r3, #27
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	001a      	movs	r2, r3
 8001dcc:	1cfb      	adds	r3, r7, #3
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d216      	bcs.n	8001e02 <USBdev_OutEPHandler+0x104>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	1cfb      	adds	r3, r7, #3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00c      	beq.n	8001e02 <USBdev_OutEPHandler+0x104>
			usbd->cfg->outepcfg[epn].handler(usbd, epn);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	1cfb      	adds	r3, r7, #3
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	18d3      	adds	r3, r2, r3
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	1cfa      	adds	r2, r7, #3
 8001dfa:	7811      	ldrb	r1, [r2, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	0010      	movs	r0, r2
 8001e00:	4798      	blx	r3
}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <USBdev_GetEPDescriptor>:

// find an endpoint descriptor for the specified endpoint - called from usb_hw_xx.c during configuration
const struct USBdesc_ep_ *USBdev_GetEPDescriptor(const struct usbdevice_ *usbd, uint8_t epaddr)
{
 8001e0a:	b590      	push	{r4, r7, lr}
 8001e0c:	b087      	sub	sp, #28
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	000a      	movs	r2, r1
 8001e14:	1cfb      	adds	r3, r7, #3
 8001e16:	701a      	strb	r2, [r3, #0]
	const struct USBdesc_config_ *cd = usbd->cfg->cfgdesc;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
	uint16_t cfgdescsize = getusb16(&cd->wTotalLength);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	3302      	adds	r3, #2
 8001e24:	220e      	movs	r2, #14
 8001e26:	18bc      	adds	r4, r7, r2
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff fc83 	bl	8001734 <getusb16>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	8023      	strh	r3, [r4, #0]
	const struct USBdesc_ep_ *epd;

	for (uint16_t epdoffset = cd->bLength; epdoffset < cfgdescsize; epdoffset += epd->bLength)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	2316      	movs	r3, #22
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	e01a      	b.n	8001e74 <USBdev_GetEPDescriptor+0x6a>
	{
		epd = (const struct USBdesc_ep_ *)((uint8_t *)cd + epdoffset);
 8001e3e:	2316      	movs	r3, #22
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	18d3      	adds	r3, r2, r3
 8001e48:	60bb      	str	r3, [r7, #8]
		if (epd->bDescriptorType == USB_DESCTYPE_ENDPOINT && epd->bEndpointAddress == epaddr)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d107      	bne.n	8001e62 <USBdev_GetEPDescriptor+0x58>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	789b      	ldrb	r3, [r3, #2]
 8001e56:	1cfa      	adds	r2, r7, #3
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d101      	bne.n	8001e62 <USBdev_GetEPDescriptor+0x58>
			return epd;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	e011      	b.n	8001e86 <USBdev_GetEPDescriptor+0x7c>
	for (uint16_t epdoffset = cd->bLength; epdoffset < cfgdescsize; epdoffset += epd->bLength)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	0019      	movs	r1, r3
 8001e68:	2216      	movs	r2, #22
 8001e6a:	18bb      	adds	r3, r7, r2
 8001e6c:	18ba      	adds	r2, r7, r2
 8001e6e:	8812      	ldrh	r2, [r2, #0]
 8001e70:	188a      	adds	r2, r1, r2
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	2316      	movs	r3, #22
 8001e76:	18fa      	adds	r2, r7, r3
 8001e78:	230e      	movs	r3, #14
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	8812      	ldrh	r2, [r2, #0]
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3dc      	bcc.n	8001e3e <USBdev_GetEPDescriptor+0x34>
	}
	return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b007      	add	sp, #28
 8001e8c:	bd90      	pop	{r4, r7, pc}
	...

08001e90 <__NVIC_EnableIRQ>:
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	0002      	movs	r2, r0
 8001e98:	1dfb      	adds	r3, r7, #7
 8001e9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea2:	d809      	bhi.n	8001eb8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea4:	1dfb      	adds	r3, r7, #7
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	231f      	movs	r3, #31
 8001eac:	401a      	ands	r2, r3
 8001eae:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <__NVIC_EnableIRQ+0x30>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4091      	lsls	r1, r2
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
}
 8001eb8:	46c0      	nop			@ (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_DisableIRQ>:
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	0002      	movs	r2, r0
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ed6:	d810      	bhi.n	8001efa <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	001a      	movs	r2, r3
 8001ede:	231f      	movs	r3, #31
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	4908      	ldr	r1, [pc, #32]	@ (8001f04 <__NVIC_DisableIRQ+0x40>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	2280      	movs	r2, #128	@ 0x80
 8001eec:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eee:	f3bf 8f4f 	dsb	sy
}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001ef4:	f3bf 8f6f 	isb	sy
}
 8001ef8:	46c0      	nop			@ (mov r8, r8)
}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b002      	add	sp, #8
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <getusb16>:
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	return p->lo | p->hi << 8;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b21a      	sxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	b29b      	uxth	r3, r3
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <USBhw_Init>:
// USB peripheral must be enabled before calling Init
// G0 specific: before enabling USB, set PWR_CR2_USV; no need to setup USB pins

// initialize USB peripheral
static void USBhw_Init(const struct usbdevice_ *usbd)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60bb      	str	r3, [r7, #8]
	
	for (uint8_t i = 0; i < 200; i++)
 8001f3a:	230f      	movs	r3, #15
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e008      	b.n	8001f56 <USBhw_Init+0x2a>
		usb->CNTR = USB_CNTR_USBRST;	// clear PDWN (should wait 1 us on H5)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2201      	movs	r2, #1
 8001f48:	641a      	str	r2, [r3, #64]	@ 0x40
	for (uint8_t i = 0; i < 200; i++)
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	3201      	adds	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	230f      	movs	r3, #15
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f5e:	d9f1      	bls.n	8001f44 <USBhw_Init+0x18>
    // wait tStartup
    usb->CNTR = 0;	// release reset
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	@ 0x40
    usb->DADDR = 0;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    usb->ISTR = 0;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	@ 0x44
    usb->CNTR = USB_CNTR_RESETM;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2280      	movs	r2, #128	@ 0x80
 8001f76:	00d2      	lsls	r2, r2, #3
 8001f78:	641a      	str	r2, [r3, #64]	@ 0x40
    usb->BCDR |= USB_BCDR_DPPU;	// enable DP pull-up
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	2280      	movs	r2, #128	@ 0x80
 8001f80:	0212      	lsls	r2, r2, #8
 8001f82:	431a      	orrs	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	659a      	str	r2, [r3, #88]	@ 0x58
    NVIC_EnableIRQ((IRQn_Type)usbd->cfg->irqn);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7ff ff7d 	bl	8001e90 <__NVIC_EnableIRQ>
}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b004      	add	sp, #16
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <USBhw_DeInit>:

static void USBhw_DeInit(const struct usbdevice_ *usbd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]

	NVIC_DisableIRQ((IRQn_Type)usbd->cfg->irqn);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7ff ff84 	bl	8001ec4 <__NVIC_DisableIRQ>
    usb->BCDR &= ~USB_BCDR_DPPU;	// disable DP pull-up
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <USBhw_DeInit+0x38>)
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	659a      	str	r2, [r3, #88]	@ 0x58
	usb->CNTR = USB_CNTR_USBRST | USB_CNTR_PDWN;	// set PDWN
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	ffff7fff 	.word	0xffff7fff

08001fdc <SetRxNumBlock>:
		? ((block & 0x1f) + 1) * 32
		: (block & 0x1f) * 2;
}

static inline uint8_t SetRxNumBlock(uint16_t rxsize)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	1dbb      	adds	r3, r7, #6
 8001fe6:	801a      	strh	r2, [r3, #0]
	return rxsize >= 64
		? 0x20 | (rxsize / 32 - 1)
		: (rxsize / 2);
 8001fe8:	1dbb      	adds	r3, r7, #6
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fee:	d90c      	bls.n	800200a <SetRxNumBlock+0x2e>
		? 0x20 | (rxsize / 32 - 1)
 8001ff0:	1dbb      	adds	r3, r7, #6
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	2220      	movs	r2, #32
 8002002:	4313      	orrs	r3, r2
 8002004:	b25b      	sxtb	r3, r3
		: (rxsize / 2);
 8002006:	b2db      	uxtb	r3, r3
 8002008:	e004      	b.n	8002014 <SetRxNumBlock+0x38>
 800200a:	1dbb      	adds	r3, r7, #6
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2db      	uxtb	r3, r3
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <USBhw_GetInEPSize>:

// G0 specific
// get IN endpoint size from USB registers
static uint16_t USBhw_GetInEPSize(const struct usbdevice_ *usbd, uint8_t epn)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	000a      	movs	r2, r1
 8002026:	1cfb      	adds	r3, r7, #3
 8002028:	701a      	strb	r2, [r3, #0]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]
	struct USB_BufDesc_ *bufdesc = &usb->BUFDESC[epn];
 8002030:	1cfb      	adds	r3, r7, #3
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	22f0      	movs	r2, #240	@ 0xf0
 8002036:	00d2      	lsls	r2, r2, #3
 8002038:	4694      	mov	ip, r2
 800203a:	4463      	add	r3, ip
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	60bb      	str	r3, [r7, #8]

	return bufdesc->RxAddressCount.addr - bufdesc->TxAddressCount.addr;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	b29a      	uxth	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	b29b      	uxth	r3, r3
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b004      	add	sp, #16
 800205a:	bd80      	pop	{r7, pc}

0800205c <SetEPRState>:
// change to USB_CHEP_REG_MASK defined in std header
#define USB_EPR_CFG	(USB_CHEP_ADDR | USB_EP_KIND | USB_EP_UTYPE | USB_CHEP_DEVADDR)
#define USB_EPR_FLAGS	(USB_EP_VTTX | USB_EP_VTRX | USB_CHEP_NAK | USB_CHEP_ERRTX | USB_CHEP_ERRRX)

static void SetEPRState(const struct usbdevice_ *usbd, uint8_t epaddr, uint32_t statemask, uint32_t newstate)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	200b      	movs	r0, #11
 800206a:	183b      	adds	r3, r7, r0
 800206c:	1c0a      	adds	r2, r1, #0
 800206e:	701a      	strb	r2, [r3, #0]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	617b      	str	r3, [r7, #20]
    volatile uint32_t *epr = &usb->EPR[epaddr & EPNUMMSK];
 8002076:	183b      	adds	r3, r7, r0
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2207      	movs	r2, #7
 800207c:	4013      	ands	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	18d3      	adds	r3, r2, r3
 8002084:	613b      	str	r3, [r7, #16]
    // keep config bits, write ones to toggle bits in statemask, don't reset w0c flags
    *epr = ((*epr & (USB_EPR_CFG | statemask)) ^ newstate) | USB_EPR_FLAGS;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4906      	ldr	r1, [pc, #24]	@ (80020a8 <SetEPRState+0x4c>)
 800208e:	430a      	orrs	r2, r1
 8002090:	401a      	ands	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4053      	eors	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <SetEPRState+0x50>)
 8002098:	431a      	orrs	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	601a      	str	r2, [r3, #0]
}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b006      	add	sp, #24
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	007f070f 	.word	0x007f070f
 80020ac:	06808080 	.word	0x06808080

080020b0 <USBhw_ClrEPToggle>:

// clear data toggle - required by unstall request
static void USBhw_ClrEPToggle(const struct usbdevice_ *usbd, uint8_t epaddr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	000a      	movs	r2, r1
 80020ba:	1cfb      	adds	r3, r7, #3
 80020bc:	701a      	strb	r2, [r3, #0]
	SetEPRState(usbd, epaddr, epaddr & EP_IS_IN ? USB_EP_DTOG_TX : USB_EP_DTOG_RX, 0);
 80020be:	1cfb      	adds	r3, r7, #3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da01      	bge.n	80020cc <USBhw_ClrEPToggle+0x1c>
 80020c8:	2240      	movs	r2, #64	@ 0x40
 80020ca:	e001      	b.n	80020d0 <USBhw_ClrEPToggle+0x20>
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	01da      	lsls	r2, r3, #7
 80020d0:	1cfb      	adds	r3, r7, #3
 80020d2:	7819      	ldrb	r1, [r3, #0]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	2300      	movs	r3, #0
 80020d8:	f7ff ffc0 	bl	800205c <SetEPRState>
}
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <USBhw_SetEPState>:

static void USBhw_SetEPState(const struct usbdevice_ *usbd, uint8_t epaddr, enum usb_epstate_ state)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	0008      	movs	r0, r1
 80020ee:	0011      	movs	r1, r2
 80020f0:	1cfb      	adds	r3, r7, #3
 80020f2:	1c02      	adds	r2, r0, #0
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	1cbb      	adds	r3, r7, #2
 80020f8:	1c0a      	adds	r2, r1, #0
 80020fa:	701a      	strb	r2, [r3, #0]
	if (epaddr & EP_IS_IN)	// In
 80020fc:	1cfb      	adds	r3, r7, #3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	da0a      	bge.n	800211c <USBhw_SetEPState+0x38>
		SetEPRState(usbd, epaddr, USB_EP_TX_STTX, USB_EPR_STATTX(state));
 8002106:	1cbb      	adds	r3, r7, #2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	011a      	lsls	r2, r3, #4
 800210c:	1cfb      	adds	r3, r7, #3
 800210e:	7819      	ldrb	r1, [r3, #0]
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	0013      	movs	r3, r2
 8002114:	2230      	movs	r2, #48	@ 0x30
 8002116:	f7ff ffa1 	bl	800205c <SetEPRState>
	else	// Out
		SetEPRState(usbd, epaddr, USB_EP_RX_STRX, USB_EPR_STATRX(state));
}
 800211a:	e00a      	b.n	8002132 <USBhw_SetEPState+0x4e>
		SetEPRState(usbd, epaddr, USB_EP_RX_STRX, USB_EPR_STATRX(state));
 800211c:	1cbb      	adds	r3, r7, #2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	031c      	lsls	r4, r3, #12
 8002122:	23c0      	movs	r3, #192	@ 0xc0
 8002124:	019a      	lsls	r2, r3, #6
 8002126:	1cfb      	adds	r3, r7, #3
 8002128:	7819      	ldrb	r1, [r3, #0]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	0023      	movs	r3, r4
 800212e:	f7ff ff95 	bl	800205c <SetEPRState>
}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	46bd      	mov	sp, r7
 8002136:	b003      	add	sp, #12
 8002138:	bd90      	pop	{r4, r7, pc}

0800213a <USBhw_SetEPStall>:

static void USBhw_SetEPStall(const struct usbdevice_ *usbd, uint8_t epaddr)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	000a      	movs	r2, r1
 8002144:	1cfb      	adds	r3, r7, #3
 8002146:	701a      	strb	r2, [r3, #0]
	USBhw_SetEPState(usbd, epaddr, USB_EPSTATE_STALL);
 8002148:	1cfb      	adds	r3, r7, #3
 800214a:	7819      	ldrb	r1, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff ffc7 	bl	80020e4 <USBhw_SetEPState>
}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}

0800215e <USBhw_ClrEPStall>:

static void USBhw_ClrEPStall(const struct usbdevice_ *usbd, uint8_t epaddr)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	000a      	movs	r2, r1
 8002168:	1cfb      	adds	r3, r7, #3
 800216a:	701a      	strb	r2, [r3, #0]
	USBhw_ClrEPToggle(usbd, epaddr);
 800216c:	1cfb      	adds	r3, r7, #3
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0011      	movs	r1, r2
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff ff9b 	bl	80020b0 <USBhw_ClrEPToggle>
	USBhw_SetEPState(usbd, epaddr, epaddr & EP_IS_IN ? USB_EPSTATE_NAK : USB_EPSTATE_VALID);	// ...
 800217a:	1cfb      	adds	r3, r7, #3
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b25b      	sxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	da01      	bge.n	8002188 <USBhw_ClrEPStall+0x2a>
 8002184:	2302      	movs	r3, #2
 8002186:	e000      	b.n	800218a <USBhw_ClrEPStall+0x2c>
 8002188:	2303      	movs	r3, #3
 800218a:	1cfa      	adds	r2, r7, #3
 800218c:	7811      	ldrb	r1, [r2, #0]
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	001a      	movs	r2, r3
 8002192:	f7ff ffa7 	bl	80020e4 <USBhw_SetEPState>
}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b002      	add	sp, #8
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <USBhw_IsEPStalled>:

static bool USBhw_IsEPStalled(const struct usbdevice_ *usbd, uint8_t epaddr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	000a      	movs	r2, r1
 80021aa:	1cfb      	adds	r3, r7, #3
 80021ac:	701a      	strb	r2, [r3, #0]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
    volatile uint32_t *epr = &usb->EPR[epaddr & EPNUMMSK];
 80021b4:	1cfb      	adds	r3, r7, #3
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2207      	movs	r2, #7
 80021ba:	4013      	ands	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	60bb      	str	r3, [r7, #8]
	if (epaddr & EP_IS_IN)	// In
 80021c4:	1cfb      	adds	r3, r7, #3
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da08      	bge.n	80021e0 <USBhw_IsEPStalled+0x40>
		return (*epr & USB_CHEP_TX_STTX) == USB_EPR_STATTX(USB_EPSTATE_STALL);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2230      	movs	r2, #48	@ 0x30
 80021d4:	4013      	ands	r3, r2
 80021d6:	3b10      	subs	r3, #16
 80021d8:	425a      	negs	r2, r3
 80021da:	4153      	adcs	r3, r2
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	e00a      	b.n	80021f6 <USBhw_IsEPStalled+0x56>
	else	// Out
		return (*epr & USB_CHEP_RX_STRX) == USB_EPR_STATRX(USB_EPSTATE_STALL);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	23c0      	movs	r3, #192	@ 0xc0
 80021e6:	019b      	lsls	r3, r3, #6
 80021e8:	4013      	ands	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <USBhw_IsEPStalled+0x60>)
 80021ec:	4694      	mov	ip, r2
 80021ee:	4463      	add	r3, ip
 80021f0:	425a      	negs	r2, r3
 80021f2:	4153      	adcs	r3, r2
 80021f4:	b2db      	uxtb	r3, r3
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	fffff000 	.word	0xfffff000

08002204 <USBhw_EnableRx>:

static void USBhw_EnableRx(const struct usbdevice_ *usbd, uint8_t epn)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	000a      	movs	r2, r1
 800220e:	1cfb      	adds	r3, r7, #3
 8002210:	701a      	strb	r2, [r3, #0]
	USBhw_SetEPState(usbd, epn & EPNUMMSK, USB_EPSTATE_VALID);
 8002212:	1cfb      	adds	r3, r7, #3
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2207      	movs	r2, #7
 8002218:	4013      	ands	r3, r2
 800221a:	b2d9      	uxtb	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2203      	movs	r2, #3
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff ff5f 	bl	80020e4 <USBhw_SetEPState>
}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}

0800222e <USBhw_EnableCtlSetup>:

static void USBhw_EnableCtlSetup(const struct usbdevice_ *usbd)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
	//USBhw_SetEPState(usbd, 0, USB_EPSTATE_NAK);
}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}

0800223e <reset_in_endpoints>:
// ordered by USB std
static const uint8_t eptype[] = {USBHW_EPTYPE_CTRL, USBHW_EPTYPE_ISO, USBHW_EPTYPE_BULK, USBHW_EPTYPE_INT};
#define USB_EPR_EPTYPE(a) ((eptype[a]) << 9)

static void reset_in_endpoints(const struct usbdevice_ *usbd)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	memset(usbd->inep, 0, sizeof(struct epdata_) * usbd->cfg->numeppairs);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6958      	ldr	r0, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	789b      	ldrb	r3, [r3, #2]
 8002250:	06db      	lsls	r3, r3, #27
 8002252:	0edb      	lsrs	r3, r3, #27
 8002254:	b2db      	uxtb	r3, r3
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	001a      	movs	r2, r3
 800225a:	2100      	movs	r1, #0
 800225c:	f000 fc84 	bl	8002b68 <memset>
}
 8002260:	46c0      	nop			@ (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <USBhw_Reset>:

// reset request - setup EP0
static void USBhw_Reset(const struct usbdevice_ *usbd)
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b089      	sub	sp, #36	@ 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61fb      	str	r3, [r7, #28]
	struct USB_BufDesc_ *bufdesc = usb->BUFDESC;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	22f0      	movs	r2, #240	@ 0xf0
 800227a:	0192      	lsls	r2, r2, #6
 800227c:	4694      	mov	ip, r2
 800227e:	4463      	add	r3, ip
 8002280:	61bb      	str	r3, [r7, #24]
	const struct usbdcfg_ *cfg = usbd->cfg;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	617b      	str	r3, [r7, #20]

	// buffer table starts at 0
    uint16_t addr = 0x40;	// H503 RefMan Fig. 510 cfg->numeppairs * 8;
 8002288:	2512      	movs	r5, #18
 800228a:	197b      	adds	r3, r7, r5
 800228c:	2240      	movs	r2, #64	@ 0x40
 800228e:	801a      	strh	r2, [r3, #0]
	// setup and enable EP0
	bufdesc[0].TxAddressCount.v = addr;
 8002290:	197b      	adds	r3, r7, r5
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]
	uint8_t ep0size = cfg->devdesc->bMaxPacketSize0;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	2011      	movs	r0, #17
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	79d2      	ldrb	r2, [r2, #7]
 80022a2:	701a      	strb	r2, [r3, #0]
	addr += ep0size;
 80022a4:	183b      	adds	r3, r7, r0
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b299      	uxth	r1, r3
 80022aa:	197b      	adds	r3, r7, r5
 80022ac:	197a      	adds	r2, r7, r5
 80022ae:	8812      	ldrh	r2, [r2, #0]
 80022b0:	188a      	adds	r2, r1, r2
 80022b2:	801a      	strh	r2, [r3, #0]
	bufdesc[0].RxAddressCount.v = (union USB_BDesc_){.num_block = SetRxNumBlock(ep0size), .addr = addr, .count = CNT_INVALID}.v;
 80022b4:	197b      	adds	r3, r7, r5
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	0c22      	lsrs	r2, r4, #16
 80022ba:	0412      	lsls	r2, r2, #16
 80022bc:	4313      	orrs	r3, r2
 80022be:	001c      	movs	r4, r3
 80022c0:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <USBhw_Reset+0xd4>)
 80022c2:	4323      	orrs	r3, r4
 80022c4:	001c      	movs	r4, r3
 80022c6:	0006      	movs	r6, r0
 80022c8:	183b      	adds	r3, r7, r0
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7ff fe84 	bl	8001fdc <SetRxNumBlock>
 80022d4:	0003      	movs	r3, r0
 80022d6:	1c1a      	adds	r2, r3, #0
 80022d8:	233f      	movs	r3, #63	@ 0x3f
 80022da:	4013      	ands	r3, r2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	069b      	lsls	r3, r3, #26
 80022e0:	01a2      	lsls	r2, r4, #6
 80022e2:	0992      	lsrs	r2, r2, #6
 80022e4:	4313      	orrs	r3, r2
 80022e6:	001c      	movs	r4, r3
 80022e8:	0022      	movs	r2, r4
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	605a      	str	r2, [r3, #4]
	addr += ep0size;
 80022ee:	19bb      	adds	r3, r7, r6
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b299      	uxth	r1, r3
 80022f4:	197b      	adds	r3, r7, r5
 80022f6:	197a      	adds	r2, r7, r5
 80022f8:	8812      	ldrh	r2, [r2, #0]
 80022fa:	188a      	adds	r2, r1, r2
 80022fc:	801a      	strh	r2, [r3, #0]
    usb->ISTR = 0;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	2200      	movs	r2, #0
 8002302:	645a      	str	r2, [r3, #68]	@ 0x44
    usb->DADDR = USB_DADDR_EF;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	64da      	str	r2, [r3, #76]	@ 0x4c
    usb->CNTR = USB_CNTR_CTRM | USB_CNTR_RESETM | USB_CNTR_SUSPM | USB_CNTR_SOFM;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	228e      	movs	r2, #142	@ 0x8e
 800230e:	0212      	lsls	r2, r2, #8
 8002310:	641a      	str	r2, [r3, #64]	@ 0x40
	usb->EPR[0] = USB_EPR_EPTYPE(0);// | USB_EPR_STATRX(USB_EPSTATE_VALID) | USB_EPR_STATTX(USB_EPSTATE_NAK);
 8002312:	2301      	movs	r3, #1
 8002314:	025a      	lsls	r2, r3, #9
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	601a      	str	r2, [r3, #0]
    uint32_t epstate = USB_EPR_STATRX(USB_EPSTATE_NAK) | USB_EPR_STATTX(USB_EPSTATE_NAK);
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <USBhw_Reset+0xd8>)
 800231c:	60fb      	str	r3, [r7, #12]
	SetEPRState(usbd, 0, USB_EP_RX_STRX | USB_EP_TX_STTX | USB_EP_DTOG_TX | USB_EP_DTOG_RX, epstate);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <USBhw_Reset+0xdc>)
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	2100      	movs	r1, #0
 8002326:	f7ff fe99 	bl	800205c <SetEPRState>
    reset_in_endpoints(usbd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff ff86 	bl	800223e <reset_in_endpoints>
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b009      	add	sp, #36	@ 0x24
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	03ff0000 	.word	0x03ff0000
 8002340:	00002020 	.word	0x00002020
 8002344:	00007070 	.word	0x00007070

08002348 <epbufsize>:

// convert endpoint size to endpoint buffer size
static inline uint16_t epbufsize(uint16_t s)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	0002      	movs	r2, r0
 8002350:	1dbb      	adds	r3, r7, #6
 8002352:	801a      	strh	r2, [r3, #0]
	return (s + 3) & ~3;
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	3303      	adds	r3, #3
 800235a:	b29b      	uxth	r3, r3
 800235c:	2203      	movs	r2, #3
 800235e:	4393      	bics	r3, r2
 8002360:	b29b      	uxth	r3, r3
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <USBhw_SetCfg>:

// setup and enable app endpoints on set configuration request
static void USBhw_SetCfg(const struct usbdevice_ *usbd)
{
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	b08d      	sub	sp, #52	@ 0x34
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
	USBreg *epr = usb->EPR;
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
	const struct usbdcfg_ *cfg = usbd->cfg;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	623b      	str	r3, [r7, #32]
    uint16_t addr = 0x40 /*cfg->numeppairs * 8*/ + cfg->devdesc->bMaxPacketSize0 * 2;
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	79db      	ldrb	r3, [r3, #7]
 800238a:	3320      	adds	r3, #32
 800238c:	b29b      	uxth	r3, r3
 800238e:	222e      	movs	r2, #46	@ 0x2e
 8002390:	18ba      	adds	r2, r7, r2
 8002392:	18db      	adds	r3, r3, r3
 8002394:	8013      	strh	r3, [r2, #0]
	// enable app endpoints
	struct USB_BufDesc_ *bufdesc = usb->BUFDESC;
 8002396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002398:	22f0      	movs	r2, #240	@ 0xf0
 800239a:	0192      	lsls	r2, r2, #6
 800239c:	4694      	mov	ip, r2
 800239e:	4463      	add	r3, ip
 80023a0:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 1; i < cfg->numeppairs; i++)
 80023a2:	232d      	movs	r3, #45	@ 0x2d
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e0b7      	b.n	800251c <USBhw_SetCfg+0x1b0>
	{
		bufdesc[i].TxAddressCount.v = addr;
 80023ac:	212d      	movs	r1, #45	@ 0x2d
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	18d3      	adds	r3, r2, r3
 80023b8:	222e      	movs	r2, #46	@ 0x2e
 80023ba:	18ba      	adds	r2, r7, r2
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	601a      	str	r2, [r3, #0]
    	const struct USBdesc_ep_ *ind = USBdev_GetEPDescriptor(usbd, i | EP_IS_IN);
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	4252      	negs	r2, r2
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0011      	movs	r1, r2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff fd1a 	bl	8001e0a <USBdev_GetEPDescriptor>
 80023d6:	0003      	movs	r3, r0
 80023d8:	61bb      	str	r3, [r7, #24]
		uint16_t txsize = ind ? epbufsize(getusb16(&ind->wMaxPacketSize)) : 0;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <USBhw_SetCfg+0x8c>
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	3304      	adds	r3, #4
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff fd8f 	bl	8001f08 <getusb16>
 80023ea:	0003      	movs	r3, r0
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7ff ffab 	bl	8002348 <epbufsize>
 80023f2:	0003      	movs	r3, r0
 80023f4:	001a      	movs	r2, r3
 80023f6:	e000      	b.n	80023fa <USBhw_SetCfg+0x8e>
 80023f8:	2200      	movs	r2, #0
 80023fa:	2016      	movs	r0, #22
 80023fc:	183b      	adds	r3, r7, r0
 80023fe:	801a      	strh	r2, [r3, #0]
		addr += txsize;
 8002400:	222e      	movs	r2, #46	@ 0x2e
 8002402:	18bb      	adds	r3, r7, r2
 8002404:	18b9      	adds	r1, r7, r2
 8002406:	183a      	adds	r2, r7, r0
 8002408:	8809      	ldrh	r1, [r1, #0]
 800240a:	8812      	ldrh	r2, [r2, #0]
 800240c:	188a      	adds	r2, r1, r2
 800240e:	801a      	strh	r2, [r3, #0]
    	const struct USBdesc_ep_ *outd = USBdev_GetEPDescriptor(usbd, i);
 8002410:	232d      	movs	r3, #45	@ 0x2d
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0011      	movs	r1, r2
 800241a:	0018      	movs	r0, r3
 800241c:	f7ff fcf5 	bl	8001e0a <USBdev_GetEPDescriptor>
 8002420:	0003      	movs	r3, r0
 8002422:	613b      	str	r3, [r7, #16]
		uint16_t rxsize = outd ? epbufsize(getusb16(&outd->wMaxPacketSize)) : 0;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <USBhw_SetCfg+0xd6>
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	3304      	adds	r3, #4
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff fd6a 	bl	8001f08 <getusb16>
 8002434:	0003      	movs	r3, r0
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff ff86 	bl	8002348 <epbufsize>
 800243c:	0003      	movs	r3, r0
 800243e:	001a      	movs	r2, r3
 8002440:	e000      	b.n	8002444 <USBhw_SetCfg+0xd8>
 8002442:	2200      	movs	r2, #0
 8002444:	250e      	movs	r5, #14
 8002446:	197b      	adds	r3, r7, r5
 8002448:	801a      	strh	r2, [r3, #0]
		// do not remove .v from the line below!
		bufdesc[i].RxAddressCount.v = (union USB_BDesc_){.num_block = SetRxNumBlock(rxsize), .addr = addr, .count = CNT_INVALID}.v;
 800244a:	262e      	movs	r6, #46	@ 0x2e
 800244c:	19bb      	adds	r3, r7, r6
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	0c22      	lsrs	r2, r4, #16
 8002452:	0412      	lsls	r2, r2, #16
 8002454:	4313      	orrs	r3, r2
 8002456:	001c      	movs	r4, r3
 8002458:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <USBhw_SetCfg+0x1d4>)
 800245a:	4323      	orrs	r3, r4
 800245c:	001c      	movs	r4, r3
 800245e:	197b      	adds	r3, r7, r5
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fdba 	bl	8001fdc <SetRxNumBlock>
 8002468:	0003      	movs	r3, r0
 800246a:	1c1a      	adds	r2, r3, #0
 800246c:	233f      	movs	r3, #63	@ 0x3f
 800246e:	4013      	ands	r3, r2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	069b      	lsls	r3, r3, #26
 8002474:	01a2      	lsls	r2, r4, #6
 8002476:	0992      	lsrs	r2, r2, #6
 8002478:	4313      	orrs	r3, r2
 800247a:	001c      	movs	r4, r3
 800247c:	202d      	movs	r0, #45	@ 0x2d
 800247e:	183b      	adds	r3, r7, r0
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	18d3      	adds	r3, r2, r3
 8002488:	0022      	movs	r2, r4
 800248a:	605a      	str	r2, [r3, #4]
        addr += rxsize;
 800248c:	19bb      	adds	r3, r7, r6
 800248e:	19b9      	adds	r1, r7, r6
 8002490:	197a      	adds	r2, r7, r5
 8002492:	8809      	ldrh	r1, [r1, #0]
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	188a      	adds	r2, r1, r2
 8002498:	801a      	strh	r2, [r3, #0]

//        epr[i] = i | USB_EPR_EPTYPE((ind ? ind->bmAttributes : 0) | (outd ? outd->bmAttributes : 0))
//			| (rxsize && usbd->outep[i].ptr ? USB_EPR_STATRX(USB_EPSTATE_VALID) : USB_EPR_STATRX(USB_EPSTATE_NAK))
//			| USB_EPR_STATTX(USB_EPSTATE_NAK);

        epr[i] = i | USB_EPR_EPTYPE((ind ? ind->bmAttributes : 0) | (outd ? outd->bmAttributes : 0));
 800249a:	183b      	adds	r3, r7, r0
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <USBhw_SetCfg+0x140>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	78db      	ldrb	r3, [r3, #3]
 80024a8:	0019      	movs	r1, r3
 80024aa:	e000      	b.n	80024ae <USBhw_SetCfg+0x142>
 80024ac:	2100      	movs	r1, #0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <USBhw_SetCfg+0x14e>
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	78db      	ldrb	r3, [r3, #3]
 80024b8:	e000      	b.n	80024bc <USBhw_SetCfg+0x150>
 80024ba:	2300      	movs	r3, #0
 80024bc:	430b      	orrs	r3, r1
 80024be:	4921      	ldr	r1, [pc, #132]	@ (8002544 <USBhw_SetCfg+0x1d8>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	025b      	lsls	r3, r3, #9
 80024c4:	431a      	orrs	r2, r3
 80024c6:	0011      	movs	r1, r2
 80024c8:	202d      	movs	r0, #45	@ 0x2d
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d2:	18d3      	adds	r3, r2, r3
 80024d4:	000a      	movs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
        uint32_t epstate = (rxsize && usbd->outep[i].ptr ? USB_EPR_STATRX(USB_EPSTATE_VALID) : USB_EPR_STATRX(USB_EPSTATE_NAK))
			| USB_EPR_STATTX(USB_EPSTATE_NAK);
 80024d8:	230e      	movs	r3, #14
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <USBhw_SetCfg+0x18c>
        uint32_t epstate = (rxsize && usbd->outep[i].ptr ? USB_EPR_STATRX(USB_EPSTATE_VALID) : USB_EPR_STATRX(USB_EPSTATE_NAK))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	183b      	adds	r3, r7, r0
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	18d3      	adds	r3, r2, r3
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <USBhw_SetCfg+0x18c>
			| USB_EPR_STATTX(USB_EPSTATE_NAK);
 80024f4:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <USBhw_SetCfg+0x1dc>)
 80024f6:	e000      	b.n	80024fa <USBhw_SetCfg+0x18e>
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <USBhw_SetCfg+0x1e0>)
        uint32_t epstate = (rxsize && usbd->outep[i].ptr ? USB_EPR_STATRX(USB_EPSTATE_VALID) : USB_EPR_STATRX(USB_EPSTATE_NAK))
 80024fa:	60bb      	str	r3, [r7, #8]
		SetEPRState(usbd, i, USB_EP_RX_STRX | USB_EP_TX_STTX | USB_EP_DTOG_TX | USB_EP_DTOG_RX, epstate);
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4d14      	ldr	r5, [pc, #80]	@ (8002550 <USBhw_SetCfg+0x1e4>)
 8002500:	262d      	movs	r6, #45	@ 0x2d
 8002502:	19bb      	adds	r3, r7, r6
 8002504:	7819      	ldrb	r1, [r3, #0]
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	0013      	movs	r3, r2
 800250a:	002a      	movs	r2, r5
 800250c:	f7ff fda6 	bl	800205c <SetEPRState>
    for (uint8_t i = 1; i < cfg->numeppairs; i++)
 8002510:	0031      	movs	r1, r6
 8002512:	187b      	adds	r3, r7, r1
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	187b      	adds	r3, r7, r1
 8002518:	3201      	adds	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	789b      	ldrb	r3, [r3, #2]
 8002520:	06db      	lsls	r3, r3, #27
 8002522:	0edb      	lsrs	r3, r3, #27
 8002524:	b2db      	uxtb	r3, r3
 8002526:	001a      	movs	r2, r3
 8002528:	232d      	movs	r3, #45	@ 0x2d
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4293      	cmp	r3, r2
 8002530:	d200      	bcs.n	8002534 <USBhw_SetCfg+0x1c8>
 8002532:	e73b      	b.n	80023ac <USBhw_SetCfg+0x40>
	}
    EVTMON('C');
}
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b00d      	add	sp, #52	@ 0x34
 800253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	03ff0000 	.word	0x03ff0000
 8002544:	08002ecc 	.word	0x08002ecc
 8002548:	00003020 	.word	0x00003020
 800254c:	00002020 	.word	0x00002020
 8002550:	00007070 	.word	0x00007070

08002554 <USBhw_ResetCfg>:

// disable app endpoints on set configuration 0 request
static void USBhw_ResetCfg(const struct usbdevice_ *usbd)
{
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	const struct usbdcfg_ *cfg = usbd->cfg;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	60bb      	str	r3, [r7, #8]
	// disable app endpoints
    for (uint8_t i = 1; i < cfg->numeppairs; i++)
 8002562:	230f      	movs	r3, #15
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e00e      	b.n	800258a <USBhw_ResetCfg+0x36>
	{
		SetEPRState(usbd, i, USB_EP_RX_STRX | USB_EP_TX_STTX | USB_EP_DTOG_TX | USB_EP_DTOG_RX,
 800256c:	4c10      	ldr	r4, [pc, #64]	@ (80025b0 <USBhw_ResetCfg+0x5c>)
 800256e:	4a11      	ldr	r2, [pc, #68]	@ (80025b4 <USBhw_ResetCfg+0x60>)
 8002570:	250f      	movs	r5, #15
 8002572:	197b      	adds	r3, r7, r5
 8002574:	7819      	ldrb	r1, [r3, #0]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	0023      	movs	r3, r4
 800257a:	f7ff fd6f 	bl	800205c <SetEPRState>
    for (uint8_t i = 1; i < cfg->numeppairs; i++)
 800257e:	0029      	movs	r1, r5
 8002580:	187b      	adds	r3, r7, r1
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	187b      	adds	r3, r7, r1
 8002586:	3201      	adds	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	789b      	ldrb	r3, [r3, #2]
 800258e:	06db      	lsls	r3, r3, #27
 8002590:	0edb      	lsrs	r3, r3, #27
 8002592:	b2db      	uxtb	r3, r3
 8002594:	001a      	movs	r2, r3
 8002596:	230f      	movs	r3, #15
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4293      	cmp	r3, r2
 800259e:	d3e5      	bcc.n	800256c <USBhw_ResetCfg+0x18>
			USB_EPR_STATRX(USB_EPSTATE_NAK) | USB_EPR_STATTX(USB_EPSTATE_NAK));
	}
    reset_in_endpoints(usbd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff fe4b 	bl	800223e <reset_in_endpoints>
}
 80025a8:	46c0      	nop			@ (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b004      	add	sp, #16
 80025ae:	bdb0      	pop	{r4, r5, r7, pc}
 80025b0:	00002020 	.word	0x00002020
 80025b4:	00007070 	.word	0x00007070

080025b8 <USBhw_WriteTxData>:

// write data packet to be sent
static void USBhw_WriteTxData(const struct usbdevice_ *usbd, uint8_t epn)
{
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	000a      	movs	r2, r1
 80025c2:	1cfb      	adds	r3, r7, #3
 80025c4:	701a      	strb	r2, [r3, #0]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
	struct epdata_ *epd = &usbd->inep[epn];
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	1cfb      	adds	r3, r7, #3
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	18d3      	adds	r3, r2, r3
 80025d8:	613b      	str	r3, [r7, #16]
	uint16_t epsize = USBhw_GetInEPSize(usbd, epn);
 80025da:	250e      	movs	r5, #14
 80025dc:	197c      	adds	r4, r7, r5
 80025de:	1cfb      	adds	r3, r7, #3
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0011      	movs	r1, r2
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff fd18 	bl	800201c <USBhw_GetInEPSize>
 80025ec:	0003      	movs	r3, r0
 80025ee:	8023      	strh	r3, [r4, #0]
	uint16_t bcount = MIN(epd->count, epsize);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	8899      	ldrh	r1, [r3, #4]
 80025f4:	2326      	movs	r3, #38	@ 0x26
 80025f6:	18fa      	adds	r2, r7, r3
 80025f8:	197b      	adds	r3, r7, r5
 80025fa:	1c0c      	adds	r4, r1, #0
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b298      	uxth	r0, r3
 8002600:	b2a1      	uxth	r1, r4
 8002602:	4288      	cmp	r0, r1
 8002604:	d900      	bls.n	8002608 <USBhw_WriteTxData+0x50>
 8002606:	1c23      	adds	r3, r4, #0
 8002608:	8013      	strh	r3, [r2, #0]
	usb->BUFDESC[epn].TxAddressCount.v = (union USB_BDesc_){.count = bcount, .addr = usb->BUFDESC[epn].TxAddressCount.addr}.v;
 800260a:	2300      	movs	r3, #0
 800260c:	1cfa      	adds	r2, r7, #3
 800260e:	7811      	ldrb	r1, [r2, #0]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	20f0      	movs	r0, #240	@ 0xf0
 8002614:	00c0      	lsls	r0, r0, #3
 8002616:	4684      	mov	ip, r0
 8002618:	4461      	add	r1, ip
 800261a:	00c9      	lsls	r1, r1, #3
 800261c:	588a      	ldr	r2, [r1, r2]
 800261e:	b292      	uxth	r2, r2
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	4313      	orrs	r3, r2
 8002626:	2026      	movs	r0, #38	@ 0x26
 8002628:	183a      	adds	r2, r7, r0
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	0592      	lsls	r2, r2, #22
 800262e:	0d92      	lsrs	r2, r2, #22
 8002630:	b292      	uxth	r2, r2
 8002632:	0592      	lsls	r2, r2, #22
 8002634:	0d92      	lsrs	r2, r2, #22
 8002636:	0412      	lsls	r2, r2, #16
 8002638:	494d      	ldr	r1, [pc, #308]	@ (8002770 <USBhw_WriteTxData+0x1b8>)
 800263a:	400b      	ands	r3, r1
 800263c:	4313      	orrs	r3, r2
 800263e:	1cfa      	adds	r2, r7, #3
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	0019      	movs	r1, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	24f0      	movs	r4, #240	@ 0xf0
 8002648:	00e4      	lsls	r4, r4, #3
 800264a:	46a4      	mov	ip, r4
 800264c:	4462      	add	r2, ip
 800264e:	00d2      	lsls	r2, r2, #3
 8002650:	50d1      	str	r1, [r2, r3]

	if (bcount)
 8002652:	183b      	adds	r3, r7, r0
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d100      	bne.n	800265c <USBhw_WriteTxData+0xa4>
 800265a:	e084      	b.n	8002766 <USBhw_WriteTxData+0x1ae>
	{
		epd->count -= bcount;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	889a      	ldrh	r2, [r3, #4]
 8002660:	183b      	adds	r3, r7, r0
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	b29a      	uxth	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	809a      	strh	r2, [r3, #4]
		volatile uint32_t *dest = &usb->PMA[(usb->BUFDESC[epn].TxAddressCount.v & 0xffff) / 4];
 800266c:	1cfb      	adds	r3, r7, #3
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	21f0      	movs	r1, #240	@ 0xf0
 8002674:	00c9      	lsls	r1, r1, #3
 8002676:	468c      	mov	ip, r1
 8002678:	4462      	add	r2, ip
 800267a:	00d2      	lsls	r2, r2, #3
 800267c:	58d3      	ldr	r3, [r2, r3]
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	22f0      	movs	r2, #240	@ 0xf0
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	4694      	mov	ip, r2
 800268a:	4463      	add	r3, ip
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	623b      	str	r3, [r7, #32]
		const uint8_t *src = epd->ptr;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61fb      	str	r3, [r7, #28]
		while (bcount > 3)
 800269a:	e02a      	b.n	80026f2 <USBhw_WriteTxData+0x13a>
		{
			uint32_t v = *src++;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	61fa      	str	r2, [r7, #28]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	60bb      	str	r3, [r7, #8]
			v |= *src++ << 8;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	61fa      	str	r2, [r7, #28]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	001a      	movs	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
			v |= *src++ << 16;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	61fa      	str	r2, [r7, #28]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	001a      	movs	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60bb      	str	r3, [r7, #8]
			v |= *src++ << 24;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	61fa      	str	r2, [r7, #28]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	061b      	lsls	r3, r3, #24
 80026d4:	001a      	movs	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
			*dest++ = v;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	1d1a      	adds	r2, r3, #4
 80026e0:	623a      	str	r2, [r7, #32]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	601a      	str	r2, [r3, #0]
			bcount -= 4;
 80026e6:	2226      	movs	r2, #38	@ 0x26
 80026e8:	18bb      	adds	r3, r7, r2
 80026ea:	18ba      	adds	r2, r7, r2
 80026ec:	8812      	ldrh	r2, [r2, #0]
 80026ee:	3a04      	subs	r2, #4
 80026f0:	801a      	strh	r2, [r3, #0]
		while (bcount > 3)
 80026f2:	2126      	movs	r1, #38	@ 0x26
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d8cf      	bhi.n	800269c <USBhw_WriteTxData+0xe4>
		}
		if (bcount)
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02d      	beq.n	8002760 <USBhw_WriteTxData+0x1a8>
		{
			uint32_t v = *src++;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	61fa      	str	r2, [r7, #28]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
			if (--bcount)
 800270e:	187b      	adds	r3, r7, r1
 8002710:	187a      	adds	r2, r7, r1
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	3a01      	subs	r2, #1
 8002716:	801a      	strh	r2, [r3, #0]
 8002718:	187b      	adds	r3, r7, r1
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01a      	beq.n	8002756 <USBhw_WriteTxData+0x19e>
			{
				v |= *src++ << 8;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	61fa      	str	r2, [r7, #28]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	001a      	movs	r2, r3
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
				if (--bcount)
 8002732:	187b      	adds	r3, r7, r1
 8002734:	187a      	adds	r2, r7, r1
 8002736:	8812      	ldrh	r2, [r2, #0]
 8002738:	3a01      	subs	r2, #1
 800273a:	801a      	strh	r2, [r3, #0]
 800273c:	187b      	adds	r3, r7, r1
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <USBhw_WriteTxData+0x19e>
					v |= *src++ << 16;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	61fa      	str	r2, [r7, #28]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	001a      	movs	r2, r3
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
			}
			*dest++ = v;
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	1d1a      	adds	r2, r3, #4
 800275a:	623a      	str	r2, [r7, #32]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	601a      	str	r2, [r3, #0]
		}
		epd->ptr = (uint8_t *)src;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	601a      	str	r2, [r3, #0]
	}
}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b00a      	add	sp, #40	@ 0x28
 800276c:	bdb0      	pop	{r4, r5, r7, pc}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	fc00ffff 	.word	0xfc00ffff

08002774 <USBhw_StartTx>:

static void USBhw_StartTx(const struct usbdevice_ *usbd, uint8_t epn)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	000a      	movs	r2, r1
 800277e:	1cfb      	adds	r3, r7, #3
 8002780:	701a      	strb	r2, [r3, #0]
	epn &= EPNUMMSK;
 8002782:	1cfb      	adds	r3, r7, #3
 8002784:	1cfa      	adds	r2, r7, #3
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	2107      	movs	r1, #7
 800278a:	400a      	ands	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
    USBhw_WriteTxData(usbd, epn);
 800278e:	1cfb      	adds	r3, r7, #3
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f7ff ff0e 	bl	80025b8 <USBhw_WriteTxData>
    if (epn == 0 && usbd->inep[0].ptr && usbd->inep[0].count == 0)
 800279c:	1cfb      	adds	r3, r7, #3
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d113      	bne.n	80027cc <USBhw_StartTx+0x58>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <USBhw_StartTx+0x58>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	889b      	ldrh	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <USBhw_StartTx+0x58>
    {
    	// last data packet sent over control ep - prepare for status out
    	usbd->devdata->ep0state = USBD_EP0_STATUS_OUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2205      	movs	r2, #5
 80027be:	70da      	strb	r2, [r3, #3]
    	// TODO: set EPKIND bit as STATUS_OUT? (need to reset it later, so usb_dev should control it)
        USBhw_SetEPState(usbd, 0, USB_EPSTATE_VALID);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2203      	movs	r2, #3
 80027c4:	2100      	movs	r1, #0
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff fc8c 	bl	80020e4 <USBhw_SetEPState>
    }
    USBhw_SetEPState(usbd, epn | 0x80, USB_EPSTATE_VALID);
 80027cc:	1cfb      	adds	r3, r7, #3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2280      	movs	r2, #128	@ 0x80
 80027d2:	4252      	negs	r2, r2
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b2d9      	uxtb	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2203      	movs	r2, #3
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff fc81 	bl	80020e4 <USBhw_SetEPState>
}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b002      	add	sp, #8
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <USBhw_ReadRxData>:

// read received data packet
static void USBhw_ReadRxData(const struct usbdevice_ *usbd, uint8_t epn)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	000a      	movs	r2, r1
 80027f6:	1cfb      	adds	r3, r7, #3
 80027f8:	701a      	strb	r2, [r3, #0]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	613b      	str	r3, [r7, #16]
	
	// count field in EP descriptor is updated with some delay (H503 errata), so do something else first
	uint8_t *dst = usbd->outep[epn].ptr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	1cfb      	adds	r3, r7, #3
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	18d3      	adds	r3, r2, r3
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	61fb      	str	r3, [r7, #28]
	const uint8_t *src = (const uint8_t *)usb->PMA + usb->BUFDESC[epn].RxAddressCount.addr;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	22f0      	movs	r2, #240	@ 0xf0
 8002814:	0192      	lsls	r2, r2, #6
 8002816:	189a      	adds	r2, r3, r2
 8002818:	1cfb      	adds	r3, r7, #3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	6939      	ldr	r1, [r7, #16]
 800281e:	20f0      	movs	r0, #240	@ 0xf0
 8002820:	00c0      	lsls	r0, r0, #3
 8002822:	4684      	mov	ip, r0
 8002824:	4463      	add	r3, ip
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	18cb      	adds	r3, r1, r3
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	b29b      	uxth	r3, r3
 800282e:	18d3      	adds	r3, r2, r3
 8002830:	60fb      	str	r3, [r7, #12]
	const volatile uint32_t *srcw = (const volatile uint32_t *)src;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	61bb      	str	r3, [r7, #24]
	uint16_t bcount;
	// "wait for descriptor update"
	while ((bcount = usb->BUFDESC[epn].RxAddressCount.count) == CNT_INVALID) ;
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	1cfb      	adds	r3, r7, #3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	21f0      	movs	r1, #240	@ 0xf0
 8002840:	00c9      	lsls	r1, r1, #3
 8002842:	468c      	mov	ip, r1
 8002844:	4463      	add	r3, ip
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	18d3      	adds	r3, r2, r3
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	0d9b      	lsrs	r3, r3, #22
 8002850:	b29a      	uxth	r2, r3
 8002852:	2116      	movs	r1, #22
 8002854:	187b      	adds	r3, r7, r1
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	187b      	adds	r3, r7, r1
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	4a31      	ldr	r2, [pc, #196]	@ (8002924 <USBhw_ReadRxData+0x138>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d0ea      	beq.n	8002838 <USBhw_ReadRxData+0x4c>
	usbd->outep[epn].count = bcount;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	1cfb      	adds	r3, r7, #3
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	187a      	adds	r2, r7, r1
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	809a      	strh	r2, [r3, #4]
	while (bcount)
 8002874:	e040      	b.n	80028f8 <USBhw_ReadRxData+0x10c>
	{
		uint32_t w = *srcw++;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	1d1a      	adds	r2, r3, #4
 800287a:	61ba      	str	r2, [r7, #24]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60bb      	str	r3, [r7, #8]
		*dst++ = w;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	61fa      	str	r2, [r7, #28]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]
		if (--bcount)
 800288c:	2016      	movs	r0, #22
 800288e:	183b      	adds	r3, r7, r0
 8002890:	183a      	adds	r2, r7, r0
 8002892:	8812      	ldrh	r2, [r2, #0]
 8002894:	3a01      	subs	r2, #1
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	183b      	adds	r3, r7, r0
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02b      	beq.n	80028f8 <USBhw_ReadRxData+0x10c>
		{
			*dst++ = w >> 8;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0a19      	lsrs	r1, r3, #8
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	61fa      	str	r2, [r7, #28]
 80028aa:	b2ca      	uxtb	r2, r1
 80028ac:	701a      	strb	r2, [r3, #0]
			if (--bcount)
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	183a      	adds	r2, r7, r0
 80028b2:	8812      	ldrh	r2, [r2, #0]
 80028b4:	3a01      	subs	r2, #1
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <USBhw_ReadRxData+0x10c>
			{
				*dst++ = w >> 16;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	0c19      	lsrs	r1, r3, #16
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	61fa      	str	r2, [r7, #28]
 80028ca:	b2ca      	uxtb	r2, r1
 80028cc:	701a      	strb	r2, [r3, #0]
				if (--bcount)
 80028ce:	183b      	adds	r3, r7, r0
 80028d0:	183a      	adds	r2, r7, r0
 80028d2:	8812      	ldrh	r2, [r2, #0]
 80028d4:	3a01      	subs	r2, #1
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	183b      	adds	r3, r7, r0
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <USBhw_ReadRxData+0x10c>
				{
					*dst++ = w >> 24;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0e19      	lsrs	r1, r3, #24
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	61fa      	str	r2, [r7, #28]
 80028ea:	b2ca      	uxtb	r2, r1
 80028ec:	701a      	strb	r2, [r3, #0]
					--bcount;
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	183a      	adds	r2, r7, r0
 80028f2:	8812      	ldrh	r2, [r2, #0]
 80028f4:	3a01      	subs	r2, #1
 80028f6:	801a      	strh	r2, [r3, #0]
	while (bcount)
 80028f8:	2316      	movs	r3, #22
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1b9      	bne.n	8002876 <USBhw_ReadRxData+0x8a>
				}
			}
		}
	}
	usb->BUFDESC[epn].RxAddressCount.count = CNT_INVALID;
 8002902:	1cfb      	adds	r3, r7, #3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	21f0      	movs	r1, #240	@ 0xf0
 800290a:	00c9      	lsls	r1, r1, #3
 800290c:	468c      	mov	ip, r1
 800290e:	4463      	add	r3, ip
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	18d3      	adds	r3, r2, r3
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4904      	ldr	r1, [pc, #16]	@ (8002928 <USBhw_ReadRxData+0x13c>)
 8002918:	430a      	orrs	r2, r1
 800291a:	605a      	str	r2, [r3, #4]
}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b008      	add	sp, #32
 8002922:	bd80      	pop	{r7, pc}
 8002924:	000003ff 	.word	0x000003ff
 8002928:	03ff0000 	.word	0x03ff0000

0800292c <USBhw_IRQHandler>:

void USBhw_IRQHandler(const struct usbdevice_ *usbd)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b089      	sub	sp, #36	@ 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	USBh_TypeDef *usb = (USBh_TypeDef *)usbd->usb;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61fb      	str	r3, [r7, #28]
	
	uint32_t istr = usb->ISTR & (usb->CNTR | 0xff);
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	21ff      	movs	r1, #255	@ 0xff
 8002944:	430b      	orrs	r3, r1
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
	
    if (istr & USB_ISTR_WKUP)
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	015b      	lsls	r3, r3, #5
 8002950:	4013      	ands	r3, r2
 8002952:	d01c      	beq.n	800298e <USBhw_IRQHandler+0x62>
	{
        //usb->CNTR &= ~USB_CNTR_SUSPRDY;	// cleared by hw
        if (~usb->FNR & USB_FNR_RXDP)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	4013      	ands	r3, r2
 800295e:	d113      	bne.n	8002988 <USBhw_IRQHandler+0x5c>
        {
        	// real resume event
            usb->CNTR &= ~USB_CNTR_SUSPEN;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	2208      	movs	r2, #8
 8002966:	4393      	bics	r3, r2
 8002968:	001a      	movs	r2, r3
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
            if (usb->FNR & USB_FNR_RXDM)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	01db      	lsls	r3, r3, #7
 8002976:	4013      	ands	r3, r2
 8002978:	d006      	beq.n	8002988 <USBhw_IRQHandler+0x5c>
            {
            	// resume (not reset)
                // callback...
                if (usbd->Resume_Handler)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <USBhw_IRQHandler+0x5c>
                	usbd->Resume_Handler();
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4798      	blx	r3
                EVTMON('W');
            }
        }
        usb->ISTR = ~USB_ISTR_WKUP;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4a68      	ldr	r2, [pc, #416]	@ (8002b2c <USBhw_IRQHandler+0x200>)
 800298c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    if (istr & USB_ISTR_RESET) // Reset
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4013      	ands	r3, r2
 8002996:	d00f      	beq.n	80029b8 <USBhw_IRQHandler+0x8c>
	{
        usb->ISTR = ~USB_ISTR_RESET;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4a65      	ldr	r2, [pc, #404]	@ (8002b30 <USBhw_IRQHandler+0x204>)
 800299c:	645a      	str	r2, [r3, #68]	@ 0x44
        USBhw_Reset(usbd);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff fc61 	bl	8002268 <USBhw_Reset>
        if (usbd->Reset_Handler)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d100      	bne.n	80029b0 <USBhw_IRQHandler+0x84>
 80029ae:	e0b6      	b.n	8002b1e <USBhw_IRQHandler+0x1f2>
        	usbd->Reset_Handler();
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4798      	blx	r3
        EVTMON('R');
        return;
 80029b6:	e0b2      	b.n	8002b1e <USBhw_IRQHandler+0x1f2>
    }
    if (istr & USB_ISTR_CTR)	// EP traffic interrupt
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	4013      	ands	r3, r2
 80029c0:	d100      	bne.n	80029c4 <USBhw_IRQHandler+0x98>
 80029c2:	e07c      	b.n	8002abe <USBhw_IRQHandler+0x192>
	{
		uint8_t  epn = usb->ISTR & USB_ISTR_IDN;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	2017      	movs	r0, #23
 80029cc:	183b      	adds	r3, r7, r0
 80029ce:	210f      	movs	r1, #15
 80029d0:	400a      	ands	r2, r1
 80029d2:	701a      	strb	r2, [r3, #0]
		volatile uint32_t *epr = &usb->EPR[epn];
 80029d4:	0001      	movs	r1, r0
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	18d3      	adds	r3, r2, r3
 80029e0:	613b      	str	r3, [r7, #16]
		uint32_t eprv = *epr;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]
		if (eprv & USB_CHEP_VTTX)	// data sent on In endpoint
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	4013      	ands	r3, r2
 80029ee:	d045      	beq.n	8002a7c <USBhw_IRQHandler+0x150>
		{
			*epr = (eprv & USB_EPR_CFG) | (USB_EPR_FLAGS & ~USB_CHEP_VTTX);	// clear CTR_TX
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a50      	ldr	r2, [pc, #320]	@ (8002b34 <USBhw_IRQHandler+0x208>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	4a50      	ldr	r2, [pc, #320]	@ (8002b38 <USBhw_IRQHandler+0x20c>)
 80029f8:	431a      	orrs	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	601a      	str	r2, [r3, #0]
			struct epdata_ *epd = &usbd->inep[epn];
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	18d3      	adds	r3, r2, r3
 8002a0a:	60bb      	str	r3, [r7, #8]

			if (epd->count)	// Continue sending
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	889b      	ldrh	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <USBhw_IRQHandler+0xf8>
			{
				//USBlog_recordevt(0x10);
				USBhw_StartTx(usbd, epn);
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fea9 	bl	8002774 <USBhw_StartTx>
 8002a22:	e02b      	b.n	8002a7c <USBhw_IRQHandler+0x150>
			}
			else if (epd->sendzlp)	// send a ZLP
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	799b      	ldrb	r3, [r3, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <USBhw_IRQHandler+0x118>
			{
				epd->sendzlp = 0;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	719a      	strb	r2, [r3, #6]
				USBhw_StartTx(usbd, epn);
 8002a32:	2317      	movs	r3, #23
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7ff fe99 	bl	8002774 <USBhw_StartTx>
 8002a42:	e01b      	b.n	8002a7c <USBhw_IRQHandler+0x150>
			}
			else	// In transfer completed
			{
				if (epn == 0 && usbd->devdata->setaddress)
 8002a44:	2317      	movs	r3, #23
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <USBhw_IRQHandler+0x140>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	789b      	ldrb	r3, [r3, #2]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <USBhw_IRQHandler+0x140>
				{
					usb->DADDR = usbd->devdata->setaddress | USB_DADDR_EF;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	789b      	ldrb	r3, [r3, #2]
 8002a5e:	2280      	movs	r2, #128	@ 0x80
 8002a60:	4252      	negs	r2, r2
 8002a62:	4313      	orrs	r3, r2
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	001a      	movs	r2, r3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
				    EVTMON('A');
				}
				USBdev_InEPHandler(usbd, epn);
 8002a6c:	2317      	movs	r3, #23
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0011      	movs	r1, r2
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7ff f8fc 	bl	8001c74 <USBdev_InEPHandler>
			}
		}
		if (eprv & USB_CHEP_VTRX)	// data received on Out endpoint
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	4013      	ands	r3, r2
 8002a84:	d01b      	beq.n	8002abe <USBhw_IRQHandler+0x192>
		{
			USBhw_ReadRxData(usbd, epn);
 8002a86:	2417      	movs	r4, #23
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0011      	movs	r1, r2
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff feab 	bl	80027ec <USBhw_ReadRxData>
			*epr = (eprv & USB_EPR_CFG) | (USB_EPR_FLAGS & ~USB_CHEP_VTRX);		// clear CTR_RX
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4a26      	ldr	r2, [pc, #152]	@ (8002b34 <USBhw_IRQHandler+0x208>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	4a27      	ldr	r2, [pc, #156]	@ (8002b3c <USBhw_IRQHandler+0x210>)
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	601a      	str	r2, [r3, #0]
			USBdev_OutEPHandler(usbd, epn, eprv & USB_EP_SETUP);
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	4013      	ands	r3, r2
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	4193      	sbcs	r3, r2
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	7819      	ldrb	r1, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff f920 	bl	8001cfe <USBdev_OutEPHandler>
		}
	}
    if (istr & USB_ISTR_SUSP)	// suspend
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d01a      	beq.n	8002afe <USBhw_IRQHandler+0x1d2>
	{
        /* Force low-power mode in the macrocell */
    	usb->CNTR |= USB_CNTR_SUSPEN;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	2208      	movs	r2, #8
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* clear ISTR after setting CNTR_FSUSP */
        usb->ISTR = ~USB_ISTR_SUSP;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <USBhw_IRQHandler+0x214>)
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
        usb->CNTR |= USB_CNTR_SUSPRDY | USB_CNTR_WKUPM;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <USBhw_IRQHandler+0x218>)
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40

        reset_in_endpoints(usbd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff fba8 	bl	800223e <reset_in_endpoints>
        // suspend callback should go here
        // callback...
        if (usbd->Suspend_Handler)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d015      	beq.n	8002b22 <USBhw_IRQHandler+0x1f6>
        	usbd->Suspend_Handler();
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4798      	blx	r3
        EVTMON('S');
        return;
 8002afc:	e011      	b.n	8002b22 <USBhw_IRQHandler+0x1f6>
    }
    if (istr & USB_ISTR_SOF)
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	2380      	movs	r3, #128	@ 0x80
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	d00d      	beq.n	8002b24 <USBhw_IRQHandler+0x1f8>
	{
        usb->ISTR = ~USB_ISTR_SOF;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b48 <USBhw_IRQHandler+0x21c>)
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44
        if (usbd->SOF_Handler)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <USBhw_IRQHandler+0x1f8>
        	usbd->SOF_Handler();
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	4798      	blx	r3
 8002b1c:	e002      	b.n	8002b24 <USBhw_IRQHandler+0x1f8>
        return;
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	e000      	b.n	8002b24 <USBhw_IRQHandler+0x1f8>
        return;
 8002b22:	46c0      	nop			@ (mov r8, r8)
    }
}
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b009      	add	sp, #36	@ 0x24
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	ffffefff 	.word	0xffffefff
 8002b30:	fffffbff 	.word	0xfffffbff
 8002b34:	007f070f 	.word	0x007f070f
 8002b38:	06808000 	.word	0x06808000
 8002b3c:	06800080 	.word	0x06800080
 8002b40:	fffff7ff 	.word	0xfffff7ff
 8002b44:	00001004 	.word	0x00001004
 8002b48:	fffffdff 	.word	0xfffffdff

08002b4c <memcmp>:
 8002b4c:	b530      	push	{r4, r5, lr}
 8002b4e:	2400      	movs	r4, #0
 8002b50:	3901      	subs	r1, #1
 8002b52:	42a2      	cmp	r2, r4
 8002b54:	d101      	bne.n	8002b5a <memcmp+0xe>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e005      	b.n	8002b66 <memcmp+0x1a>
 8002b5a:	5d03      	ldrb	r3, [r0, r4]
 8002b5c:	3401      	adds	r4, #1
 8002b5e:	5d0d      	ldrb	r5, [r1, r4]
 8002b60:	42ab      	cmp	r3, r5
 8002b62:	d0f6      	beq.n	8002b52 <memcmp+0x6>
 8002b64:	1b58      	subs	r0, r3, r5
 8002b66:	bd30      	pop	{r4, r5, pc}

08002b68 <memset>:
 8002b68:	0003      	movs	r3, r0
 8002b6a:	1882      	adds	r2, r0, r2
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d100      	bne.n	8002b72 <memset+0xa>
 8002b70:	4770      	bx	lr
 8002b72:	7019      	strb	r1, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	e7f9      	b.n	8002b6c <memset+0x4>

08002b78 <__libc_init_array>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	4c0c      	ldr	r4, [pc, #48]	@ (8002bb0 <__libc_init_array+0x38>)
 8002b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8002bb4 <__libc_init_array+0x3c>)
 8002b80:	1b64      	subs	r4, r4, r5
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	42a6      	cmp	r6, r4
 8002b86:	d109      	bne.n	8002b9c <__libc_init_array+0x24>
 8002b88:	2600      	movs	r6, #0
 8002b8a:	f000 f823 	bl	8002bd4 <_init>
 8002b8e:	4c0a      	ldr	r4, [pc, #40]	@ (8002bb8 <__libc_init_array+0x40>)
 8002b90:	4d0a      	ldr	r5, [pc, #40]	@ (8002bbc <__libc_init_array+0x44>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	42a6      	cmp	r6, r4
 8002b98:	d105      	bne.n	8002ba6 <__libc_init_array+0x2e>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	00b3      	lsls	r3, r6, #2
 8002b9e:	58eb      	ldr	r3, [r5, r3]
 8002ba0:	4798      	blx	r3
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	e7ee      	b.n	8002b84 <__libc_init_array+0xc>
 8002ba6:	00b3      	lsls	r3, r6, #2
 8002ba8:	58eb      	ldr	r3, [r5, r3]
 8002baa:	4798      	blx	r3
 8002bac:	3601      	adds	r6, #1
 8002bae:	e7f2      	b.n	8002b96 <__libc_init_array+0x1e>
 8002bb0:	08002f00 	.word	0x08002f00
 8002bb4:	08002f00 	.word	0x08002f00
 8002bb8:	08002f04 	.word	0x08002f04
 8002bbc:	08002f00 	.word	0x08002f00

08002bc0 <memcpy>:
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	b510      	push	{r4, lr}
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d100      	bne.n	8002bca <memcpy+0xa>
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	5ccc      	ldrb	r4, [r1, r3]
 8002bcc:	54c4      	strb	r4, [r0, r3]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	e7f8      	b.n	8002bc4 <memcpy+0x4>
	...

08002bd4 <_init>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr

08002be0 <_fini>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr
